#!/usr/bin/env python3
# ====================================
# –§–ê–ô–õ: backend/install.py
# –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
# ====================================

"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Legal Assistant API
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîß {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            check=True, 
            capture_output=True, 
            text=True
        )
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout.strip()}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        if e.stdout:
            print(f"Stdout: {e.stdout}")
        if e.stderr:
            print(f"Stderr: {e.stderr}")
        return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    return True

def install_minimal():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–• –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    requirements_file = "requirements-minimal.txt"
    if not os.path.exists(requirements_file):
        print(f"‚ùå –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return run_command(
        f"{sys.executable} -m pip install -r {requirements_file}",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    )

def install_windows():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ WINDOWS-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    requirements_file = "requirements-windows.txt"
    if not os.path.exists(requirements_file):
        print(f"‚ùå –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return run_command(
        f"{sys.executable} -m pip install -r {requirements_file}",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    )

def install_full():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–û–õ–ù–´–• –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –º–æ–≥—É—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã!")
    
    requirements_file = "requirements.txt"
    if not os.path.exists(requirements_file):
        print(f"‚ùå –§–∞–π–ª {requirements_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return run_command(
        f"{sys.executable} -m pip install -r {requirements_file}",
        "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"
    )

def upgrade_pip():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç pip"""
    return run_command(
        f"{sys.executable} -m pip install --upgrade pip",
        "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip"
    )

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    directories = [
        "logs",
        "simple_db", 
        "chromadb_data",
        "uploads",
        "temp",
        "backups"
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {directory}: {e}")

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    test_imports = [
        ("fastapi", "FastAPI framework"),
        ("uvicorn", "ASGI server"),
        ("pydantic", "Data validation")
    ]
    
    all_good = True
    
    for module, description in test_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module}: {description}")
        except ImportError:
            print(f"‚ùå {module}: {description} - –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
            all_good = False
    
    return all_good

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("=" * 60)
    print("üèõÔ∏è  Legal Assistant API - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        sys.exit(1)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print("\n" + "="*40)
    print("–≠–¢–ê–ü 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip")
    print("="*40)
    upgrade_pip()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–∏–ø–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    print("\n" + "="*40)
    print("–≠–¢–ê–ü 2: –í—ã–±–æ—Ä —Ç–∏–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("="*40)
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç–∞–Ω–æ–≤–∫–∏:")
    print("1. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è (—Ç–æ–ª—å–∫–æ FastAPI + uvicorn)")
    print("2. Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è Windows)")
    print("3. –ü–æ–ª–Ω–∞—è (–≤–∫–ª—é—á–∞—è ChromaDB, –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã)")
    print("4. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
    
    if choice == "1":
        success = install_minimal()
    elif choice == "2":
        success = install_windows()
    elif choice == "3":
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å:")
        print("   - Microsoft Visual C++ Build Tools")
        print("   - Rust –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä")
        print("   - –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
        confirm = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").strip().lower()
        if confirm == 'y':
            success = install_full()
        else:
            print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é")
            success = install_windows()
    elif choice == "4":
        print("‚è© –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞")
        success = True
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –≤–µ—Ä—Å–∏—é")
        success = install_windows()
    
    if not success:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    print("\n" + "="*40)
    print("–≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("="*40)
    
    if test_installation():
        print("\n‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python main.py")
        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É:")
        print("   http://localhost:8000/docs")
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
        print("   pip install fastapi uvicorn pydantic")

if __name__ == "__main__":
    main()