# backend/app/middleware.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π middleware –¥–ª—è FastAPI –±–µ–∑ BaseHTTPMiddleware
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±–∏—Ä–∞–µ–º BaseHTTPMiddleware –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å POST –∑–∞–ø—Ä–æ—Å—ã
"""

import time
import logging
import uuid
from fastapi import Request, Response
from fastapi.responses import JSONResponse

logger = logging.getLogger(__name__)

def setup_middleware(app):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π middleware –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å POST
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π middleware
    """
    
    try:
        logger.info("üîß Setting up simplified middleware (no BaseHTTPMiddleware)")
        
        # –¢–û–õ–¨–ö–û –æ–¥–∏–Ω –ø—Ä–æ—Å—Ç–æ–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        @app.middleware("http")
        async def request_logging_middleware(request: Request, call_next):
            """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
            
            request_id = str(uuid.uuid4())[:8]
            start_time = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
            method = request.method
            path = request.url.path
            client_ip = request.client.host if request.client else "unknown"
            
            # –ù–ï –ª–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            if not path.startswith(("/favicon.ico", "/static", "/docs", "/openapi.json")):
                logger.info(f"üåê [{request_id}] {method} {path} - IP: {client_ip}")
            
            try:
                # –í–ê–ñ–ù–û: –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
                response = await call_next(request)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É
                response.headers["X-Request-ID"] = request_id
                response.headers["X-Process-Time"] = str(round(time.time() - start_time, 3))
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç–∞—Ç–∏–∫–∞
                if not path.startswith(("/favicon.ico", "/static", "/docs", "/openapi.json")):
                    process_time = time.time() - start_time
                    status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
                    logger.info(f"{status_emoji} [{request_id}] {method} {path} - Status: {response.status_code} - Time: {process_time:.3f}s")
                
                return response
                
            except Exception as e:
                process_time = time.time() - start_time
                logger.error(f"‚ùå [{request_id}] {method} {path} - Error: {str(e)} - Time: {process_time:.3f}s")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—à–∏–±–∫—É
                return JSONResponse(
                    status_code=500,
                    content={
                        "detail": "Internal server error",
                        "request_id": request_id,
                        "path": path,
                        "method": method,
                        "timestamp": time.time()
                    }
                )
        
        logger.info("‚úÖ Simplified middleware configured successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error configuring middleware: {e}")
        raise

# –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã BaseHTTPMiddleware - –æ–Ω–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å POST

# –ü—Ä–æ—Å—Ç—ã–µ utility —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    
    real_ip = request.headers.get("X-Real-IP") 
    if real_ip:
        return real_ip
    
    # Fallback –∫ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    if hasattr(request.client, "host"):
        return request.client.host
    
    return "unknown"

def is_suspicious_request(request: Request) -> bool:
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    path = request.url.path.lower()
    user_agent = request.headers.get("user-agent", "").lower()
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    suspicious_paths = [
        "/.env", "/wp-admin", "/admin.php", "/phpmyadmin",
        "/wp-login.php", "/.git", "/config", "/backup"
    ]
    
    if any(suspicious in path for suspicious in suspicious_paths):
        return True
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent
    suspicious_agents = [
        "sqlmap", "nikto", "nmap", "masscan", "zap"
    ]
    
    if any(agent in user_agent for agent in suspicious_agents):
        return True
    
    return False

# –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = [
    'setup_middleware',
    'get_client_ip', 
    'is_suspicious_request'
]