# backend/app/middleware.py - –£–ü–†–û–©–Å–ù–ù–´–ô MIDDLEWARE
"""
–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π middleware –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö timeout —Å–∏—Å—Ç–µ–º –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
–ó–∞–º–µ–Ω—è–µ—Ç –ø–µ—Ä–µ—É—Å–ª–æ–∂–Ω—ë–Ω–Ω—ã–π middleware.py —Å BaseHTTPMiddleware –∏ rate limiting
"""

import time
import logging
import uuid
from typing import Dict, Any

from fastapi import Request, Response
from fastapi.responses import JSONResponse

logger = logging.getLogger(__name__)

# –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
_request_stats = {
    "total_requests": 0,
    "requests_by_method": {},
    "response_times": [],
    "errors": 0
}

def setup_middleware(app):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π middleware –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π
    –£–±–∏—Ä–∞–µ—Ç BaseHTTPMiddleware, rate limiting, security –ø—Ä–æ–≤–µ—Ä–∫–∏
    """
    
    try:
        logger.info("üöÄ Configuring simplified middleware...")
        
        @app.middleware("http")
        async def simple_request_middleware(request: Request, call_next):
            """
            –ü—Ä–æ—Å—Ç–æ–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            """
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞–ø—Ä–æ—Å–∞
            request_id = str(uuid.uuid4())[:8]
            start_time = time.time()
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            request.state.request_id = request_id
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            method = request.method
            path = request.url.path
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            _update_request_stats(method)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
            if not _is_static_path(path):
                logger.info(f"üåê [{request_id}] {method} {path}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                response = await call_next(request)
                
                # –°—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è
                process_time = time.time() - start_time
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                response.headers["X-Request-ID"] = request_id
                response.headers["X-Process-Time"] = str(round(process_time, 3))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                _update_response_stats(process_time)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
                if not _is_static_path(path):
                    status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
                    logger.info(f"{status_emoji} [{request_id}] {method} {path} - {response.status_code} - {process_time:.3f}s")
                
                return response
                
            except Exception as e:
                process_time = time.time() - start_time
                
                logger.error(f"‚ùå [{request_id}] {method} {path} - Error: {str(e)} - {process_time:.3f}s")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
                _request_stats["errors"] += 1
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω—É—é –æ—à–∏–±–∫—É
                return JSONResponse(
                    status_code=500,
                    content={
                        "detail": "Internal server error",
                        "request_id": request_id,
                        "path": path,
                        "method": method,
                        "timestamp": time.time(),
                        "help": "Check server logs for details"
                    }
                )
        
        logger.info("‚úÖ Simplified middleware configured successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error configuring middleware: {e}")
        # –ù–µ –ø–∞–¥–∞–µ–º, middleware –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω

def _is_static_path(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–æ–º"""
    static_paths = ["/docs", "/redoc", "/openapi.json", "/favicon.ico", "/static", "/manifest.json"]
    return any(path.startswith(static) for static in static_paths)

def _update_request_stats(method: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤"""
    _request_stats["total_requests"] += 1
    _request_stats["requests_by_method"][method] = _request_stats["requests_by_method"].get(method, 0) + 1

def _update_response_stats(response_time: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"""
    _request_stats["response_times"].append(response_time)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞
    if len(_request_stats["response_times"]) > 100:
        _request_stats["response_times"] = _request_stats["response_times"][-50:]

def get_middleware_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware"""
    response_times = _request_stats["response_times"]
    
    stats = {
        "total_requests": _request_stats["total_requests"],
        "requests_by_method": _request_stats["requests_by_method"],
        "total_errors": _request_stats["errors"],
        "average_response_time": 0.0,
        "min_response_time": 0.0,
        "max_response_time": 0.0
    }
    
    if response_times:
        stats["average_response_time"] = sum(response_times) / len(response_times)
        stats["min_response_time"] = min(response_times)
        stats["max_response_time"] = max(response_times)
    
    return stats

def reset_middleware_stats():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware"""
    global _request_stats
    _request_stats = {
        "total_requests": 0,
        "requests_by_method": {},
        "response_times": [],
        "errors": 0
    }
    logger.info("üîÑ Middleware statistics reset")

# ====================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
# ====================================

def get_security_stats() -> Dict[str, Any]:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è security —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    return {
        "blocked_ips_count": 0,
        "rate_limited_ips": 0,
        "total_errors": _request_stats["errors"],
        "security_enabled": False,
        "note": "Security features disabled in simplified version"
    }

def block_ip(ip: str, reason: str = "Manual block"):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    logger.info(f"‚ö†Ô∏è IP blocking not implemented in simplified version: {ip} ({reason})")

def unblock_ip(ip: str):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ IP (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    logger.info(f"‚ö†Ô∏è IP unblocking not implemented in simplified version: {ip}")

# ====================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
# ====================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    'setup_middleware',
    'get_middleware_stats',
    'reset_middleware_stats',
    
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
    'get_security_stats',
    'block_ip',
    'unblock_ip'
]