# ====================================
# –§–ê–ô–õ: backend/app/middleware.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
# ====================================

"""
Middleware –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Legal Assistant
"""

import time
import logging
import json
import uuid
from datetime import datetime
from typing import Callable, Dict, Any, Optional
from urllib.parse import urlparse

from fastapi import Request, Response, HTTPException
from fastapi.responses import JSONResponse
from starlette.middleware.base import BaseHTTPMiddleware  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
from starlette.types import ASGIApp, Receive, Scope, Send

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å utils, –Ω–æ –¥–µ–ª–∞–µ–º fallback –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
try:
    from utils.helpers import notification_manager, PerformanceTimer
    _utils_available = True
except ImportError:
    _utils_available = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class MockNotificationManager:
        def add_notification(self, message, type="info"):
            logging.getLogger("notifications").info(f"[{type}] {message}")
    
    class MockPerformanceTimer:
        def __init__(self, *args, **kwargs):
            pass
        def __enter__(self):
            return self
        def __exit__(self, *args):
            pass
    
    notification_manager = MockNotificationManager()
    PerformanceTimer = MockPerformanceTimer

try:
    from app.config import settings
    _config_available = True
except ImportError:
    _config_available = False
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    class MockSettings:
        def __init__(self):
            pass
    settings = MockSettings()

logger = logging.getLogger(__name__)

class RequestLoggingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)
        self.sensitive_paths = {"/admin", "/api/admin"}
        self.excluded_paths = {"/docs", "/redoc", "/openapi.json", "/favicon.ico"}
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
        request_id = str(uuid.uuid4())[:8]
        start_time = time.time()
        
        # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        request.state.request_id = request_id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client_ip = self._get_client_ip(request)
        user_agent = request.headers.get("user-agent", "Unknown")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
        path = request.url.path
        method = request.method
        
        if path not in self.excluded_paths:
            logger.info(
                f"üåê [{request_id}] {method} {path} - "
                f"IP: {client_ip} - UA: {user_agent[:50]}..."
            )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
            response = await call_next(request)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_time = time.time() - start_time
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            response.headers["X-Request-ID"] = request_id
            response.headers["X-Process-Time"] = str(round(process_time, 3))
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if path not in self.excluded_paths:
                status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
                logger.info(
                    f"{status_emoji} [{request_id}] {method} {path} - "
                    f"Status: {response.status_code} - "
                    f"Time: {process_time:.3f}s"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ utils –¥–æ—Å—Ç—É–ø–Ω—ã)
            if _utils_available and path.startswith("/api/admin") and response.status_code >= 400:
                notification_manager.add_notification(
                    f"Admin API error: {method} {path} returned {response.status_code}",
                    "error"
                )
            
            return response
            
        except Exception as e:
            process_time = time.time() - start_time
            
            logger.error(
                f"‚ùå [{request_id}] {method} {path} - "
                f"Error: {str(e)} - "
                f"Time: {process_time:.3f}s"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ utils –¥–æ—Å—Ç—É–ø–Ω—ã)
            if _utils_available:
                notification_manager.add_notification(
                    f"Server error on {method} {path}: {str(e)}",
                    "error"
                )
            
            raise
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        # Fallback –∫ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
        if hasattr(request.client, "host"):
            return request.client.host
        
        return "unknown"

class SecurityMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)
        self.blocked_ips = set()
        self.rate_limit_storage = {}  # IP -> {count, reset_time}
        self.rate_limit_requests = 100  # –ó–∞–ø—Ä–æ—Å–æ–≤
        self.rate_limit_window = 3600   # –ó–∞ —á–∞—Å
        
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        client_ip = self._get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
        if client_ip in self.blocked_ips:
            logger.warning(f"üö´ Blocked IP attempted access: {client_ip}")
            return JSONResponse(
                status_code=403,
                content={"detail": "Access denied"}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if self._is_rate_limited(client_ip):
            logger.warning(f"‚ö†Ô∏è Rate limit exceeded for IP: {client_ip}")
            return JSONResponse(
                status_code=429,
                content={"detail": "Rate limit exceeded. Please try again later."}
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if self._is_suspicious_request(request):
            logger.warning(f"üîç Suspicious request from {client_ip}: {request.url.path}")
            # –ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = await call_next(request)
        
        # –î–æ–±–∞–≤–ª—è–µ–º security –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self._add_security_headers(response)
        
        return response
    
    def _get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ (–¥—É–±–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ RequestLoggingMiddleware)"""
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
        
        if hasattr(request.client, "host"):
            return request.client.host
        
        return "unknown"
    
    def _is_rate_limited(self, client_ip: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è IP"""
        now = time.time()
        
        if client_ip not in self.rate_limit_storage:
            self.rate_limit_storage[client_ip] = {
                "count": 1,
                "reset_time": now + self.rate_limit_window
            }
            return False
        
        ip_data = self.rate_limit_storage[client_ip]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ
        if now > ip_data["reset_time"]:
            ip_data["count"] = 1
            ip_data["reset_time"] = now + self.rate_limit_window
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        ip_data["count"] += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        return ip_data["count"] > self.rate_limit_requests
    
    def _is_suspicious_request(self, request: Request) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        path = request.url.path.lower()
        user_agent = request.headers.get("user-agent", "").lower()
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        suspicious_paths = [
            "/.env", "/wp-admin", "/admin.php", "/phpmyadmin",
            "/wp-login.php", "/.git", "/config", "/backup"
        ]
        
        if any(suspicious in path for suspicious in suspicious_paths):
            return True
        
        # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent
        suspicious_agents = [
            "sqlmap", "nikto", "nmap", "masscan", "zap",
            "burpsuite", "w3af", "acunetix"
        ]
        
        if any(agent in user_agent for agent in suspicious_agents):
            return True
        
        # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—É—Ç–∏
        if len(path) > 500:
            return True
        
        return False
    
    def _add_security_headers(self, response: Response):
        """–î–æ–±–∞–≤–ª—è–µ—Ç security –∑–∞–≥–æ–ª–æ–≤–∫–∏"""
        security_headers = {
            "X-Content-Type-Options": "nosniff",
            "X-Frame-Options": "DENY",
            "X-XSS-Protection": "1; mode=block",
            "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
            "Referrer-Policy": "strict-origin-when-cross-origin",
            "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';",
        }
        
        for header, value in security_headers.items():
            response.headers[header] = value

class ErrorHandlingMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        try:
            response = await call_next(request)
            return response
            
        except HTTPException as e:
            # HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è FastAPI –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            raise
            
        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            request_id = getattr(request.state, "request_id", "unknown")
            
            logger.error(
                f"üí• [{request_id}] Unhandled exception: {type(e).__name__}: {str(e)}",
                exc_info=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ utils –¥–æ—Å—Ç—É–ø–Ω—ã)
            if _utils_available:
                notification_manager.add_notification(
                    f"Unhandled server error: {type(e).__name__}",
                    "error"
                )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É (–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏)
            return JSONResponse(
                status_code=500,
                content={
                    "detail": "Internal server error",
                    "request_id": request_id,
                    "timestamp": datetime.now().isoformat()
                }
            )

class DatabaseMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)
        self.db_stats = {
            "total_queries": 0,
            "slow_queries": 0,
            "failed_queries": 0,
            "average_query_time": 0.0
        }
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–æ –∑–∞–ø—Ä–æ—Å–∞
        start_time = time.time()
        
        try:
            response = await call_next(request)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            process_time = time.time() - start_time
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
            self._update_db_stats(process_time, success=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ë–î
            if hasattr(request.state, "db_queries"):
                response.headers["X-DB-Queries"] = str(request.state.db_queries)
            
            return response
            
        except Exception as e:
            process_time = time.time() - start_time
            self._update_db_stats(process_time, success=False)
            raise
    
    def _update_db_stats(self, process_time: float, success: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.db_stats["total_queries"] += 1
        
        if not success:
            self.db_stats["failed_queries"] += 1
        
        if process_time > 1.0:  # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã > 1 —Å–µ–∫—É–Ω–¥—ã
            self.db_stats["slow_queries"] += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        total = self.db_stats["total_queries"]
        current_avg = self.db_stats["average_query_time"]
        self.db_stats["average_query_time"] = (
            (current_avg * (total - 1) + process_time) / total
        )
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        total = self.db_stats["total_queries"]
        return {
            **self.db_stats,
            "success_rate": ((total - self.db_stats["failed_queries"]) / total * 100) if total > 0 else 0,
            "slow_query_rate": (self.db_stats["slow_queries"] / total * 100) if total > 0 else 0
        }

class MetricsMiddleware(BaseHTTPMiddleware):
    """Middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, app: ASGIApp):
        super().__init__(app)
        self.metrics = {
            "total_requests": 0,
            "requests_by_method": {},
            "requests_by_path": {},
            "response_times": [],
            "status_codes": {},
            "user_agents": {},
            "errors": []
        }
    
    async def dispatch(self, request: Request, call_next: Callable) -> Response:
        start_time = time.time()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏
        self.metrics["total_requests"] += 1
        
        method = request.method
        self.metrics["requests_by_method"][method] = (
            self.metrics["requests_by_method"].get(method, 0) + 1
        )
        
        path = request.url.path
        self.metrics["requests_by_path"][path] = (
            self.metrics["requests_by_path"].get(path, 0) + 1
        )
        
        user_agent = request.headers.get("user-agent", "Unknown")[:50]
        self.metrics["user_agents"][user_agent] = (
            self.metrics["user_agents"].get(user_agent, 0) + 1
        )
        
        try:
            response = await call_next(request)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            self.metrics["response_times"].append(response_time)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω –æ—Ç–≤–µ—Ç–∞
            if len(self.metrics["response_times"]) > 1000:
                self.metrics["response_times"] = self.metrics["response_times"][-500:]
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
            status = response.status_code
            self.metrics["status_codes"][status] = (
                self.metrics["status_codes"].get(status, 0) + 1
            )
            
            return response
            
        except Exception as e:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            error_info = {
                "timestamp": time.time(),
                "path": path,
                "method": method,
                "error": str(e),
                "type": type(e).__name__
            }
            self.metrics["errors"].append(error_info)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
            if len(self.metrics["errors"]) > 100:
                self.metrics["errors"] = self.metrics["errors"][-50:]
            
            raise
    
    def get_metrics(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        response_times = self.metrics["response_times"]
        
        metrics = self.metrics.copy()
        
        if response_times:
            metrics["average_response_time"] = sum(response_times) / len(response_times)
            metrics["min_response_time"] = min(response_times)
            metrics["max_response_time"] = max(response_times)
            
            # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
            sorted_times = sorted(response_times)
            metrics["p50_response_time"] = sorted_times[len(sorted_times) // 2]
            metrics["p95_response_time"] = sorted_times[int(len(sorted_times) * 0.95)]
            metrics["p99_response_time"] = sorted_times[int(len(sorted_times) * 0.99)]
        else:
            metrics.update({
                "average_response_time": 0,
                "min_response_time": 0,
                "max_response_time": 0,
                "p50_response_time": 0,
                "p95_response_time": 0,
                "p99_response_time": 0
            })
        
        # –£–¥–∞–ª—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        metrics.pop("response_times", None)
        
        return metrics
    
    def reset_metrics(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        self.metrics = {
            "total_requests": 0,
            "requests_by_method": {},
            "requests_by_path": {},
            "response_times": [],
            "status_codes": {},
            "user_agents": {},
            "errors": []
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã middleware –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
database_middleware = DatabaseMiddleware
metrics_middleware = MetricsMiddleware

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Å–µ—Ö middleware
def setup_middleware(app):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ middleware –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    try:
        # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω! Middleware –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        # 1. –ú–µ—Ç—Ä–∏–∫–∏ (—Å–∞–º—ã–π –≤–Ω–µ—à–Ω–∏–π —Å–ª–æ–π)
        app.add_middleware(MetricsMiddleware)
        
        # 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–î
        app.add_middleware(DatabaseMiddleware)
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        app.add_middleware(ErrorHandlingMiddleware)
        
        # 4. –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        app.add_middleware(SecurityMiddleware)
        
        # 5. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–∞–º—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–π)
        app.add_middleware(RequestLoggingMiddleware)
        
        logger.info("‚úÖ All middleware configured successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error configuring middleware: {e}")
        raise

# –≠–∫—Å–ø–æ—Ä—Ç
__all__ = [
    'RequestLoggingMiddleware',
    'SecurityMiddleware', 
    'ErrorHandlingMiddleware',
    'DatabaseMiddleware',
    'MetricsMiddleware',
    'setup_middleware'
]