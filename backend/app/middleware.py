# ====================================
# –§–ê–ô–õ: backend/app/middleware.py (–ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
# ====================================

"""
Middleware –¥–ª—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Legal Assistant
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ó–∞–º–µ–Ω–µ–Ω BaseHTTPMiddleware –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π middleware –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã POST 404
"""

import time
import logging
import json
import uuid
from datetime import datetime
from typing import Callable, Dict, Any, Optional
from urllib.parse import urlparse

from fastapi import Request, Response, HTTPException
from fastapi.responses import JSONResponse

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å utils, –Ω–æ –¥–µ–ª–∞–µ–º fallback –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
try:
    from utils.helpers import notification_manager, PerformanceTimer
    _utils_available = True
except ImportError:
    _utils_available = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
    class MockNotificationManager:
        def add_notification(self, message, type="info"):
            logging.getLogger("notifications").info(f"[{type}] {message}")
    
    class MockPerformanceTimer:
        def __init__(self, *args, **kwargs):
            pass
        def __enter__(self):
            return self
        def __exit__(self, *args):
            pass
    
    notification_manager = MockNotificationManager()
    PerformanceTimer = MockPerformanceTimer

try:
    from app.config import settings
    _config_available = True
except ImportError:
    _config_available = False
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    class MockSettings:
        def __init__(self):
            pass
    settings = MockSettings()

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
_request_stats = {
    "total_requests": 0,
    "requests_by_method": {},
    "requests_by_path": {},
    "response_times": [],
    "status_codes": {},
    "user_agents": {},
    "errors": [],
    "blocked_ips": set(),
    "rate_limit_storage": {}  # IP -> {count, reset_time}
}

def setup_middleware(app):
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ middleware
    –ó–∞–º–µ–Ω—è–µ—Ç BaseHTTPMiddleware –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ middleware
    """
    
    try:
        logger.info("üöÄ Configuring middleware with POST fixes...")
        
        # ====================================
        # –ì–õ–ê–í–ù–´–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô MIDDLEWARE
        # ====================================
        @app.middleware("http")
        async def main_request_middleware(request: Request, call_next: Callable):
            """
            –û—Å–Ω–æ–≤–Ω–æ–π middleware –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
            –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π middleware –≤–º–µ—Å—Ç–æ BaseHTTPMiddleware
            """
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞
            request_id = str(uuid.uuid4())[:8]
            start_time = time.time()
            
            # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            request.state.request_id = request_id
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
            client_ip = _get_client_ip(request)
            user_agent = request.headers.get("user-agent", "Unknown")
            path = request.url.path
            method = request.method
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
            _update_request_stats(method, path, user_agent)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            security_check = _perform_security_checks(request, client_ip)
            if security_check:
                return security_check  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
            if not _is_static_path(path):
                logger.info(
                    f"üåê [{request_id}] {method} {path} - "
                    f"IP: {client_ip} - UA: {user_agent[:50]}..."
                )
            
            try:
                # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
                response = await call_next(request)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                process_time = time.time() - start_time
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É
                response.headers["X-Request-ID"] = request_id
                response.headers["X-Process-Time"] = str(round(process_time, 3))
                
                # –î–æ–±–∞–≤–ª—è–µ–º security –∑–∞–≥–æ–ª–æ–≤–∫–∏
                _add_security_headers(response)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∏—Å–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã)
                if not _is_static_path(path):
                    status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
                    logger.info(
                        f"{status_emoji} [{request_id}] {method} {path} - "
                        f"Status: {response.status_code} - "
                        f"Time: {process_time:.3f}s"
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤
                _update_response_stats(response.status_code, process_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ (–µ—Å–ª–∏ utils –¥–æ—Å—Ç—É–ø–Ω—ã)
                if _utils_available and path.startswith("/api/admin") and response.status_code >= 400:
                    notification_manager.add_notification(
                        f"Admin API error: {method} {path} returned {response.status_code}",
                        "error"
                    )
                
                return response
                
            except Exception as e:
                process_time = time.time() - start_time
                
                logger.error(
                    f"‚ùå [{request_id}] {method} {path} - "
                    f"Error: {str(e)} - "
                    f"Time: {process_time:.3f}s",
                    exc_info=True
                )
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                _record_error(request_id, path, method, str(e))
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ utils –¥–æ—Å—Ç—É–ø–Ω—ã)
                if _utils_available:
                    notification_manager.add_notification(
                        f"Server error on {method} {path}: {str(e)}",
                        "error"
                    )
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±—â—É—é –æ—à–∏–±–∫—É (–Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏)
                return JSONResponse(
                    status_code=500,
                    content={
                        "detail": "Internal server error",
                        "request_id": request_id,
                        "timestamp": datetime.now().isoformat(),
                        "path": path,
                        "method": method
                    }
                )
        
        logger.info("‚úÖ Main middleware configured successfully")
        
    except Exception as e:
        logger.error(f"‚ùå Error configuring middleware: {e}")
        raise

# ====================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================================

def _get_client_ip(request: Request) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø—Ä–æ–∫—Å–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
    forwarded_for = request.headers.get("X-Forwarded-For")
    if forwarded_for:
        return forwarded_for.split(",")[0].strip()
    
    real_ip = request.headers.get("X-Real-IP")
    if real_ip:
        return real_ip
    
    # Fallback –∫ –ø—Ä—è–º–æ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é
    if hasattr(request.client, "host"):
        return request.client.host
    
    return "unknown"

def _is_static_path(path: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–æ–º"""
    static_paths = {"/docs", "/redoc", "/openapi.json", "/favicon.ico", "/static"}
    return any(path.startswith(static) for static in static_paths)

def _perform_security_checks(request: Request, client_ip: str) -> Optional[JSONResponse]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP
    if client_ip in _request_stats["blocked_ips"]:
        logger.warning(f"üö´ Blocked IP attempted access: {client_ip}")
        return JSONResponse(
            status_code=403,
            content={"detail": "Access denied"}
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    if _is_rate_limited(client_ip):
        logger.warning(f"‚ö†Ô∏è Rate limit exceeded for IP: {client_ip}")
        return JSONResponse(
            status_code=429,
            content={"detail": "Rate limit exceeded. Please try again later."}
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if _is_suspicious_request(request):
        logger.warning(f"üîç Suspicious request from {client_ip}: {request.url.path}")
        # –ú–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å IP –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        
    return None

def _is_rate_limited(client_ip: str, requests_per_hour: int = 100) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç rate limiting –¥–ª—è IP"""
    now = time.time()
    window = 3600  # 1 —á–∞—Å
    
    if client_ip not in _request_stats["rate_limit_storage"]:
        _request_stats["rate_limit_storage"][client_ip] = {
            "count": 1,
            "reset_time": now + window
        }
        return False
    
    ip_data = _request_stats["rate_limit_storage"][client_ip]
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –µ—Å–ª–∏ –æ–∫–Ω–æ –∏—Å—Ç–µ–∫–ª–æ
    if now > ip_data["reset_time"]:
        ip_data["count"] = 1
        ip_data["reset_time"] = now + window
        return False
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    ip_data["count"] += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    return ip_data["count"] > requests_per_hour

def _is_suspicious_request(request: Request) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
    path = request.url.path.lower()
    user_agent = request.headers.get("user-agent", "").lower()
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
    suspicious_paths = [
        "/.env", "/wp-admin", "/admin.php", "/phpmyadmin",
        "/wp-login.php", "/.git", "/config", "/backup"
    ]
    
    if any(suspicious in path for suspicious in suspicious_paths):
        return True
    
    # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ User-Agent
    suspicious_agents = [
        "sqlmap", "nikto", "nmap", "masscan", "zap",
        "burpsuite", "w3af", "acunetix"
    ]
    
    if any(agent in user_agent for agent in suspicious_agents):
        return True
    
    # –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –ø—É—Ç–∏
    if len(path) > 500:
        return True
    
    return False

def _add_security_headers(response: Response):
    """–î–æ–±–∞–≤–ª—è–µ—Ç security –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É"""
    security_headers = {
        "X-Content-Type-Options": "nosniff",
        "X-Frame-Options": "DENY",
        "X-XSS-Protection": "1; mode=block",
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "Referrer-Policy": "strict-origin-when-cross-origin",
        "Content-Security-Policy": "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';",
    }
    
    for header, value in security_headers.items():
        response.headers[header] = value

def _update_request_stats(method: str, path: str, user_agent: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    _request_stats["total_requests"] += 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Ç–æ–¥–∞–º
    _request_stats["requests_by_method"][method] = (
        _request_stats["requests_by_method"].get(method, 0) + 1
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É—Ç—è–º
    _request_stats["requests_by_path"][path] = (
        _request_stats["requests_by_path"].get(path, 0) + 1
    )
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ User-Agent (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É)
    ua_short = user_agent[:50]
    _request_stats["user_agents"][ua_short] = (
        _request_stats["user_agents"].get(ua_short, 0) + 1
    )

def _update_response_stats(status_code: int, response_time: float):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤"""
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    _request_stats["response_times"].append(response_time)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω –æ—Ç–≤–µ—Ç–∞
    if len(_request_stats["response_times"]) > 1000:
        _request_stats["response_times"] = _request_stats["response_times"][-500:]
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
    _request_stats["status_codes"][status_code] = (
        _request_stats["status_codes"].get(status_code, 0) + 1
    )

def _record_error(request_id: str, path: str, method: str, error: str):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ"""
    error_info = {
        "timestamp": time.time(),
        "request_id": request_id,
        "path": path,
        "method": method,
        "error": error,
        "type": type(error).__name__ if hasattr(error, '__class__') else "UnknownError"
    }
    
    _request_stats["errors"].append(error_info)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
    if len(_request_stats["errors"]) > 100:
        _request_stats["errors"] = _request_stats["errors"][-50:]

# ====================================
# –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò
# ====================================

def get_middleware_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware"""
    response_times = _request_stats["response_times"]
    
    stats = _request_stats.copy()
    
    if response_times:
        stats["average_response_time"] = sum(response_times) / len(response_times)
        stats["min_response_time"] = min(response_times)
        stats["max_response_time"] = max(response_times)
        
        # –ü–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏
        sorted_times = sorted(response_times)
        stats["p50_response_time"] = sorted_times[len(sorted_times) // 2]
        stats["p95_response_time"] = sorted_times[int(len(sorted_times) * 0.95)]
        stats["p99_response_time"] = sorted_times[int(len(sorted_times) * 0.99)]
    else:
        stats.update({
            "average_response_time": 0,
            "min_response_time": 0,
            "max_response_time": 0,
            "p50_response_time": 0,
            "p95_response_time": 0,
            "p99_response_time": 0
        })
    
    # –£–¥–∞–ª—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    stats.pop("response_times", None)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    stats["blocked_ips"] = list(stats["blocked_ips"])
    
    return stats

def get_security_stats() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    return {
        "blocked_ips_count": len(_request_stats["blocked_ips"]),
        "blocked_ips": list(_request_stats["blocked_ips"]),
        "rate_limited_ips": len(_request_stats["rate_limit_storage"]),
        "total_errors": len(_request_stats["errors"]),
        "recent_errors": _request_stats["errors"][-10:] if _request_stats["errors"] else []
    }

def reset_middleware_stats():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É middleware"""
    global _request_stats
    _request_stats = {
        "total_requests": 0,
        "requests_by_method": {},
        "requests_by_path": {},
        "response_times": [],
        "status_codes": {},
        "user_agents": {},
        "errors": [],
        "blocked_ips": set(),
        "rate_limit_storage": {}
    }
    logger.info("üîÑ Middleware statistics reset")

def block_ip(ip: str, reason: str = "Manual block"):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å"""
    _request_stats["blocked_ips"].add(ip)
    logger.warning(f"üö´ IP {ip} blocked: {reason}")

def unblock_ip(ip: str):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ—Ç IP –∞–¥—Ä–µ—Å"""
    _request_stats["blocked_ips"].discard(ip)
    logger.info(f"‚úÖ IP {ip} unblocked")

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    'setup_middleware',
    'get_middleware_stats',
    'get_security_stats', 
    'reset_middleware_stats',
    'block_ip',
    'unblock_ip'
]