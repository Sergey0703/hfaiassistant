# backend/app/dependencies.py - –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï
"""
–≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï - —É–±–∏—Ä–∞–µ–º –≤—Å–µ background tasks –∏ —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã
"""

import logging
import os
import time
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# ====================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´ (–ë–ï–ó BACKGROUND TASKS!)
# ====================================

_document_service: Optional[object] = None
_scraper_service: Optional[object] = None
_llm_service: Optional[object] = None

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
_initialization_errors = {}

# ====================================
# DEPENDENCY FUNCTIONS
# ====================================

def get_document_service():
    """–ü–æ–ª—É—á–∞–µ—Ç document service —Å –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–ï–ó BACKGROUND TASKS"""
    global _document_service
    
    if _document_service is None:
        logger.info("üîÑ Initializing document service...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º ChromaDB
            use_chromadb = os.getenv("USE_CHROMADB", "true").lower() == "true"
            
            if use_chromadb:
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –î–æ–±–∞–≤–ª–µ–Ω try-except –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
                    try:
                        from services.chroma_service import DocumentService
                    except ImportError:
                        logger.warning("ChromaDB service not available, using fallback")
                        _document_service = _create_simple_document_fallback()
                        return _document_service
                    
                    chromadb_path = os.getenv("CHROMADB_PATH", "./chromadb_data")
                    os.makedirs(chromadb_path, exist_ok=True)
                    
                    _document_service = DocumentService(chromadb_path)
                    logger.info("‚úÖ ChromaDB document service initialized")
                    
                except ImportError as e:
                    logger.warning(f"ChromaDB not available: {e}, using simple fallback")
                    _document_service = _create_simple_document_fallback()
                    
            else:
                logger.info("ChromaDB disabled, using simple fallback")
                _document_service = _create_simple_document_fallback()
                
        except Exception as e:
            logger.error(f"‚ùå Document service initialization failed: {e}")
            _initialization_errors['document_service'] = str(e)
            _document_service = _create_simple_document_fallback()
    
    return _document_service

def get_scraper_service():
    """–ü–æ–ª—É—á–∞–µ—Ç scraper service –ë–ï–ó BACKGROUND TASKS"""
    global _scraper_service
    
    if _scraper_service is None:
        logger.info("üîÑ Initializing scraper service...")
        
        try:
            from services.scraper_service import LegalSiteScraper
            _scraper_service = LegalSiteScraper()
            logger.info("‚úÖ Scraper service initialized")
            
        except ImportError as e:
            logger.warning(f"Scraper dependencies not available: {e}")
            _initialization_errors['scraper_service'] = str(e)
            _scraper_service = _create_simple_scraper_fallback()
            
        except Exception as e:
            logger.error(f"‚ùå Scraper service initialization failed: {e}")
            _initialization_errors['scraper_service'] = str(e)
            _scraper_service = _create_simple_scraper_fallback()
    
    return _scraper_service

def get_llm_service():
    """–ü–æ–ª—É—á–∞–µ—Ç LLM service –ë–ï–ó BACKGROUND TASKS"""
    global _llm_service
    
    if _llm_service is None:
        logger.info("üîÑ Initializing Llama LLM service...")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª–µ–Ω try-except –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ create_llama_service
            try:
                from services.llama_service import create_llama_service
                _llm_service = create_llama_service()
                logger.info("‚úÖ Llama LLM service initialized")
            except ImportError:
                logger.warning("create_llama_service not available, using fallback")
                _llm_service = _create_simple_llm_fallback()
            
        except Exception as e:
            logger.error(f"‚ùå LLM service initialization failed: {e}")
            _initialization_errors['llm_service'] = str(e)
            _llm_service = _create_simple_llm_fallback()
    
    return _llm_service

def get_services_status() -> Dict[str, Any]:
    """–ü—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ë–ï–ó BACKGROUND TASKS"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    doc_service = get_document_service()
    scraper_service = get_scraper_service() 
    llm_service = get_llm_service()
    
    return {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        "document_service_available": doc_service is not None,
        "scraper_available": scraper_service is not None,
        "llm_available": llm_service is not None and getattr(llm_service, 'ready', False),
        
        # –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        "document_service_type": getattr(doc_service, 'service_type', 'unknown'),
        "scraper_service_type": getattr(scraper_service, 'service_type', 'unknown'),
        "llm_service_type": getattr(llm_service, 'service_type', 'unknown'),
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏
        "chromadb_enabled": _is_chromadb_enabled(),
        "huggingface_spaces": os.getenv("SPACE_ID") is not None,
        "demo_mode": _is_demo_mode(),
        
        # –û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        "initialization_errors": _initialization_errors,
        "total_errors": len(_initialization_errors),
        
        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        "environment": "hf_spaces" if os.getenv("SPACE_ID") else "local",
        "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local Development",
        
        # –í—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å–∞
        "status_time": time.time(),
        "services_ready": all([
            doc_service is not None,
            scraper_service is not None, 
            llm_service is not None
        ])
    }

# ====================================
# –ü–†–û–°–¢–´–ï FALLBACK –°–ï–†–í–ò–°–´ –ë–ï–ó –ò–ú–ü–û–†–¢–û–í
# ====================================

def _create_simple_document_fallback():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    class SimpleDocumentFallback:
        def __init__(self):
            self.service_type = "simple_fallback"
            
        async def search(self, query: str, category: str = None, limit: int = 5, min_relevance: float = 0.3):
            """–ü—Ä–æ—Å—Ç–æ–π fallback –ø–æ–∏—Å–∫"""
            return [{
                "content": f"üîç Document search is initializing. Your query: '{query}' will be processed once the full document service is ready.\n\nüí° The Llama legal assistant is starting up and will provide detailed responses shortly.",
                "filename": "system_message.txt",
                "document_id": "fallback_001",
                "relevance_score": 1.0,
                "metadata": {
                    "status": "fallback_mode",
                    "query": query,
                    "category": category,
                    "service_type": "simple_fallback"
                }
            }]
        
        async def get_stats(self):
            """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            return {
                "total_documents": 0,
                "categories": ["general", "legislation", "jurisprudence"],
                "database_type": "Simple Fallback",
                "status": "service_initializing"
            }
        
        async def get_all_documents(self):
            return []
        
        async def delete_document(self, doc_id: str):
            return False
        
        async def process_and_store_file(self, file_path: str, category: str = "general"):
            return False
    
    return SimpleDocumentFallback()

def _create_simple_scraper_fallback():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è —Å–∫—Ä–∞–ø–µ—Ä–∞"""
    
    class SimpleScraperFallback:
        def __init__(self):
            self.service_type = "simple_fallback"
            self.legal_sites_config = {}
        
        async def scrape_legal_site(self, url: str):
            """–ü—Ä–æ—Å—Ç–æ–π fallback —Å–∫—Ä–∞–ø–∏–Ω–≥"""
            return type('SimpleDoc', (), {
                'url': url,
                'title': f'Demo content from {url}',
                'content': f'üåê Web scraping service is initializing. Content from {url} will be available once the service is ready.',
                'metadata': {
                    'status': 'fallback_mode',
                    'url': url,
                    'service_type': 'simple_fallback'
                },
                'category': 'demo'
            })()
        
        async def scrape_multiple_urls(self, urls, delay=1.0):
            results = []
            for url in urls:
                doc = await self.scrape_legal_site(url)
                results.append(doc)
            return results
    
    return SimpleScraperFallback()

def _create_simple_llm_fallback():
    """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è LLM –ë–ï–ó –ò–ú–ü–û–†–¢–û–í"""
    
    class SimpleLLMFallback:
        def __init__(self):
            self.service_type = "simple_fallback"
            self.ready = True
        
        async def answer_legal_question(self, question: str, context_documents: list, language: str = "en"):
            """–ü—Ä–æ—Å—Ç–æ–π fallback –æ—Ç–≤–µ—Ç –ë–ï–ó –ò–ú–ü–û–†–¢–û–í"""
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
            class SimpleResponse:
                def __init__(self, content, model, tokens_used, response_time, success):
                    self.content = content
                    self.model = model
                    self.tokens_used = tokens_used
                    self.response_time = response_time
                    self.success = success
            
            if language == "uk":
                content = f"""ü§ñ **Llama –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

‚è≥ –°–∏—Å—Ç–µ–º–∞ Legal Assistant –∑ Llama-3.1-8B-Instruct —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è.

üìö **–ù–µ–∑–∞–±–∞—Ä–æ–º –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–æ:**
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —é—Ä–∏–¥–∏—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏ –∑–Ω–∞–Ω—å  
‚Ä¢ –ü–æ—à—É–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—ó –ø—Ä–∞–≤–æ–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏

üîÑ **–°—Ç–∞—Ç—É—Å:** –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Llama –º–æ–¥–µ–ª—ñ... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."""
            else:
                content = f"""ü§ñ **Llama Assistant Starting**

**Your Question:** {question}

‚è≥ Legal Assistant system with Llama-3.1-8B-Instruct is initializing.

üìö **Coming soon:**
‚Ä¢ Detailed legal Q&A in English and Ukrainian
‚Ä¢ Knowledge base document analysis
‚Ä¢ Relevant legal information search  
‚Ä¢ Practical recommendations and advice

üîÑ **Status:** Connecting to Llama model... Please wait."""
            
            return SimpleResponse(
                content=content,
                model="llama_initializing",
                tokens_used=len(content.split()),
                response_time=0.1,
                success=True
            )
        
        async def get_service_status(self):
            return {
                "service_type": "simple_fallback",
                "ready": True,
                "initialization_error": "LLM service starting up"
            }
    
    return SimpleLLMFallback()

# ====================================
# UTILITY FUNCTIONS
# ====================================

def _is_chromadb_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á—ë–Ω –ª–∏ ChromaDB"""
    if _document_service is None:
        return False
    return getattr(_document_service, 'service_type', '') != 'simple_fallback'

def _is_demo_mode() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∂–∏–º –¥–µ–º–æ"""
    demo_env = os.getenv("LLM_DEMO_MODE", "false").lower()
    return demo_env in ["true", "1", "yes"] or bool(_initialization_errors.get('llm_service'))

# ====================================
# –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ (–£–î–ê–õ–Ø–ï–ú BACKGROUND –§–£–ù–ö–¶–ò–ò)
# ====================================

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
SERVICES_AVAILABLE = True
CHROMADB_ENABLED = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def init_services():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É"""
    logger.info("üì¶ Services initialize on first use (NO BACKGROUND TASKS)")
    return True

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "get_document_service",
    "get_scraper_service", 
    "get_llm_service",
    "get_services_status",
    "init_services",
    "SERVICES_AVAILABLE",
    "CHROMADB_ENABLED"
]