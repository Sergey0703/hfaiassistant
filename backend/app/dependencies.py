# backend/app/dependencies.py - –£–ü–†–û–©–ï–ù–ù–´–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã
–£–±—Ä–∞–Ω–∞ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞, –æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–µ—Ä–≤–∏—Å—ã
"""

import logging
import os
import time
from typing import Optional, Dict, Any

logger = logging.getLogger(__name__)

# ====================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´
# ====================================

_document_service: Optional[object] = None
_llm_service: Optional[object] = None

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
_initialization_errors = {}

# ====================================
# –û–°–ù–û–í–ù–´–ï DEPENDENCY FUNCTIONS
# ====================================

def get_document_service():
    """–ü–æ–ª—É—á–∞–µ—Ç document service"""
    global _document_service
    
    if _document_service is None:
        logger.info("üîÑ Initializing document service...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º ChromaDB
            use_chromadb = os.getenv("USE_CHROMADB", "true").lower() == "true"
            
            if use_chromadb:
                try:
                    from services.chroma_service import DocumentService
                    chromadb_path = os.getenv("CHROMADB_PATH", "./chromadb_data")
                    os.makedirs(chromadb_path, exist_ok=True)
                    
                    _document_service = DocumentService(chromadb_path)
                    logger.info("‚úÖ ChromaDB document service initialized")
                    
                except ImportError as e:
                    logger.warning(f"ChromaDB not available: {e}")
                    _document_service = _create_empty_document_service()
                    
            else:
                logger.info("ChromaDB disabled")
                _document_service = _create_empty_document_service()
                
        except Exception as e:
            logger.error(f"‚ùå Document service initialization failed: {e}")
            _initialization_errors['document_service'] = str(e)
            _document_service = _create_empty_document_service()
    
    return _document_service

def get_llm_service():
    """–ü–æ–ª—É—á–∞–µ—Ç FLAN-T5 LLM service"""
    global _llm_service
    
    if _llm_service is None:
        logger.info("üîÑ Initializing FLAN-T5 service...")
        
        try:
            from services.flan_t5_service import create_flan_t5_service
            _llm_service = create_flan_t5_service()
            logger.info("‚úÖ FLAN-T5 service initialized")
            
        except Exception as e:
            logger.error(f"‚ùå FLAN-T5 service initialization failed: {e}")
            _initialization_errors['llm_service'] = str(e)
            _llm_service = _create_fallback_llm_service()
    
    return _llm_service

def get_services_status() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    doc_service = get_document_service()
    llm_service = get_llm_service()
    
    return {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        "document_service_available": doc_service is not None,
        "llm_available": llm_service is not None and getattr(llm_service, 'ready', False),
        
        # –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        "document_service_type": getattr(doc_service, 'service_type', 'empty'),
        "llm_service_type": getattr(llm_service, 'service_type', 'unknown'),
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏
        "chromadb_enabled": _is_chromadb_enabled(),
        "huggingface_spaces": os.getenv("SPACE_ID") is not None,
        
        # –û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        "initialization_errors": _initialization_errors,
        "total_errors": len(_initialization_errors),
        
        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        "environment": "hf_spaces" if os.getenv("SPACE_ID") else "local",
        "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
        
        # –í—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å–∞
        "status_time": time.time(),
        "services_ready": all([
            doc_service is not None,
            llm_service is not None
        ]),
        
        # –ú–æ–¥–µ–ª–∏
        "llm_model": "google/flan-t5-small",
        "embedding_model": "sentence-transformers/all-MiniLM-L6-v2",
        "memory_estimate": "~920 MB"
    }

# ====================================
# FALLBACK –°–ï–†–í–ò–°–´
# ====================================

def _create_empty_document_service():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    class EmptyDocumentService:
        def __init__(self):
            self.service_type = "empty_document_service"
            
        async def search(self, query: str, category: str = None, limit: int = 5, min_relevance: float = 0.3):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"""
            logger.debug(f"Empty document service: no results for '{query}'")
            return []
        
        async def get_stats(self):
            return {
                "total_documents": 0,
                "categories": ["general", "legislation", "jurisprudence"],
                "database_type": "Empty Service",
                "status": "no_documents_available"
            }
        
        async def get_all_documents(self):
            return []
        
        async def delete_document(self, doc_id: str):
            return False
        
        async def process_and_store_file(self, file_path: str, category: str = "general"):
            logger.warning("Cannot store files: document service not available")
            return False
    
    return EmptyDocumentService()

def _create_fallback_llm_service():
    """–°–æ–∑–¥–∞—ë—Ç fallback –¥–ª—è LLM"""
    
    class FallbackLLMService:
        def __init__(self):
            self.service_type = "llm_fallback"
            self.ready = True
        
        async def answer_legal_question(self, question: str, context_documents: list, language: str = "en"):
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
            class SimpleResponse:
                def __init__(self, content, model, tokens_used, response_time, success):
                    self.content = content
                    self.model = model
                    self.tokens_used = tokens_used
                    self.response_time = response_time
                    self.success = success
            
            if language == "uk":
                content = f"""ü§ñ **FLAN-T5 —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

‚ùå –ù–∞ –∂–∞–ª—å, FLAN-T5 Small –º–æ–¥–µ–ª—å –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏"""
            else:
                content = f"""ü§ñ **FLAN-T5 Service Unavailable**

**Your Question:** {question}

‚ùå Unfortunately, the FLAN-T5 Small model is currently unavailable.

üí° **Recommendations:**
‚Ä¢ Try again in a few minutes
‚Ä¢ Check your internet connection
‚Ä¢ Contact system administrator"""
            
            return SimpleResponse(
                content=content,
                model="llm_fallback",
                tokens_used=len(content.split()),
                response_time=0.1,
                success=True
            )
        
        async def get_service_status(self):
            return {
                "service_type": "llm_fallback",
                "ready": True,
                "error": "FLAN-T5 service not available"
            }
    
    return FallbackLLMService()

# ====================================
# UTILITY FUNCTIONS
# ====================================

def _is_chromadb_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á—ë–Ω –ª–∏ ChromaDB"""
    if _document_service is None:
        return False
    return getattr(_document_service, 'service_type', '') not in ['empty_document_service']

# ====================================
# –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
# ====================================

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
SERVICES_AVAILABLE = True
CHROMADB_ENABLED = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def init_services():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É"""
    logger.info("üì¶ Services initialize on first use")
    return True

# ====================================
# –≠–ö–°–ü–û–†–¢
# ====================================

__all__ = [
    "get_document_service",
    "get_llm_service", 
    "get_services_status",
    "init_services",
    "SERVICES_AVAILABLE",
    "CHROMADB_ENABLED"
]