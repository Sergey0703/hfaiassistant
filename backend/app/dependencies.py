# backend/app/dependencies.py - –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import logging
import os
import time
from typing import Optional, Dict, Any, List

logger = logging.getLogger(__name__)

# ====================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –°–ï–†–í–ò–°–´
# ====================================

_document_service: Optional[object] = None
_llm_service: Optional[object] = None
_scraper_service: Optional[object] = None

# –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
_initialization_errors = {}

# ====================================
# –û–°–ù–û–í–ù–´–ï DEPENDENCY FUNCTIONS
# ====================================

def get_document_service():
    """–ü–æ–ª—É—á–∞–µ—Ç document service"""
    global _document_service
    
    if _document_service is None:
        logger.info("üîÑ Initializing document service...")
        
        try:
            # –ü—Ä–æ–±—É–µ–º ChromaDB
            use_chromadb = os.getenv("USE_CHROMADB", "true").lower() == "true"
            
            if use_chromadb:
                try:
                    from services.chroma_service import DocumentService
                    chromadb_path = os.getenv("CHROMADB_PATH", "./chromadb_data")
                    os.makedirs(chromadb_path, exist_ok=True)
                    
                    _document_service = DocumentService(chromadb_path)
                    logger.info("‚úÖ ChromaDB document service initialized")
                    
                except ImportError as e:
                    logger.warning(f"ChromaDB not available: {e}")
                    _document_service = _create_empty_document_service()
                    
            else:
                logger.info("ChromaDB disabled")
                _document_service = _create_empty_document_service()
                
        except Exception as e:
            logger.error(f"‚ùå Document service initialization failed: {e}")
            _initialization_errors['document_service'] = str(e)
            _document_service = _create_empty_document_service()
    
    return _document_service

def get_scraper_service():
    """–ü–æ–ª—É—á–∞–µ—Ç scraper service"""
    global _scraper_service
    
    if _scraper_service is None:
        logger.info("üîÑ Initializing scraper service...")
        
        try:
            from services.scraper_service import LegalSiteScraper
            _scraper_service = LegalSiteScraper()
            logger.info("‚úÖ Scraper service initialized")
            
        except Exception as e:
            logger.error(f"‚ùå Scraper service initialization failed: {e}")
            _initialization_errors['scraper_service'] = str(e)
            _scraper_service = _create_fallback_scraper_service()
    
    return _scraper_service

def get_llm_service():
    """–ü–æ–ª—É—á–∞–µ—Ç FLAN-T5 LLM service"""
    global _llm_service
    
    if _llm_service is None:
        logger.info("üîÑ Initializing FLAN-T5 service...")
        
        try:
            from services.flan_t5_service import create_flan_t5_service
            _llm_service = create_flan_t5_service()
            logger.info("‚úÖ FLAN-T5 service initialized")
            
        except Exception as e:
            logger.error(f"‚ùå FLAN-T5 service initialization failed: {e}")
            _initialization_errors['llm_service'] = str(e)
            _llm_service = _create_fallback_llm_service()
    
    return _llm_service

def get_services_status() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–¥–µ–ª–∞–ª–∏
    doc_service = get_document_service()
    llm_service = get_llm_service()
    scraper_service = get_scraper_service()
    
    return {
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        "document_service_available": doc_service is not None,
        "llm_available": llm_service is not None and getattr(llm_service, 'ready', False),
        "scraper_available": scraper_service is not None,
        
        # –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        "document_service_type": getattr(doc_service, 'service_type', 'empty'),
        "llm_service_type": getattr(llm_service, 'service_type', 'unknown'),
        "scraper_service_type": getattr(scraper_service, 'service_type', 'unknown'),
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ñ–ª–∞–≥–∏
        "chromadb_enabled": _is_chromadb_enabled(),
        "huggingface_spaces": os.getenv("SPACE_ID") is not None,
        "scraping_enabled": getattr(scraper_service, 'service_type', '') != 'scraper_fallback',
        
        # –û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        "initialization_errors": _initialization_errors,
        "total_errors": len(_initialization_errors),
        
        # –û–∫—Ä—É–∂–µ–Ω–∏–µ
        "environment": "hf_spaces" if os.getenv("SPACE_ID") else "local",
        "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
        
        # –í—Ä–µ–º—è —Å—Ç–∞—Ç—É—Å–∞
        "status_time": time.time(),
        "services_ready": all([
            doc_service is not None,
            llm_service is not None,
            scraper_service is not None
        ]),
        
        # –ú–æ–¥–µ–ª–∏
        "llm_model": "google/flan-t5-small",
        "embedding_model": "sentence-transformers/all-MiniLM-L6-v2",
        "memory_estimate": "~920 MB",
        
        # –î–µ–º–æ —Ä–µ–∂–∏–º
        "demo_mode": os.getenv("LLM_DEMO_MODE", "false").lower() == "true"
    }

# ====================================
# FALLBACK –°–ï–†–í–ò–°–´
# ====================================

def _create_empty_document_service():
    """–°–æ–∑–¥–∞—ë—Ç –ø—É—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    class EmptyDocumentService:
        def __init__(self):
            self.service_type = "empty_document_service"
            
        async def search(self, query: str, category: str = None, limit: int = 5, min_relevance: float = 0.3):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫"""
            logger.debug(f"Empty document service: no results for '{query}'")
            return []
        
        async def get_stats(self):
            return {
                "total_documents": 0,
                "categories": ["general", "legislation", "jurisprudence"],
                "database_type": "Empty Service",
                "status": "no_documents_available"
            }
        
        async def get_all_documents(self):
            return []
        
        async def delete_document(self, doc_id: str):
            return False
        
        async def process_and_store_file(self, file_path: str, category: str = "general"):
            logger.warning("Cannot store files: document service not available")
            return False
        
        async def update_document(self, doc_id: str, new_content: str = None, new_metadata: Dict = None):
            return False
    
    return EmptyDocumentService()

def _create_fallback_scraper_service():
    """–°–æ–∑–¥–∞—ë—Ç fallback –¥–ª—è scraper"""
    
    class FallbackScraperService:
        def __init__(self):
            self.service_type = "scraper_fallback"
            self.legal_sites_config = {
                "zakon.rada.gov.ua": {
                    "title": "h1",
                    "content": ".content",
                    "exclude": "nav, footer"
                },
                "irishstatutebook.ie": {
                    "title": "h1",
                    "content": ".content",
                    "exclude": "nav, footer"
                }
            }
        
        async def scrape_legal_site(self, url: str):
            """Fallback scraping - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É"""
            logger.warning(f"Scraper fallback mode: cannot scrape {url}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
            from dataclasses import dataclass
            from typing import Dict, Any
            
            @dataclass
            class ScrapedDocument:
                url: str
                title: str
                content: str
                metadata: Dict[str, Any]
                category: str = "scraped"
            
            return ScrapedDocument(
                url=url,
                title="Scraper Service Unavailable",
                content=f"""üîß **Scraper Service –≤ —Ä–µ–∂–∏–º–µ fallback**

URL: {url}

‚ö†Ô∏è –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests/beautifulsoup4
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
‚Ä¢ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:
‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install requests beautifulsoup4
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É

–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–æ–π –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.""",
                metadata={
                    "scraped_at": time.time(),
                    "real_scraping": False,
                    "fallback_mode": True,
                    "error": "Scraper service not available",
                    "recommendations": [
                        "Install scraping dependencies",
                        "Check network connectivity",
                        "Restart the service"
                    ]
                },
                category="scraped"
            )
        
        async def scrape_multiple_urls(self, urls: list, delay: float = 1.0):
            """Fallback –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
            results = []
            for url in urls:
                doc = await self.scrape_legal_site(url)
                results.append(doc)
            return results
        
        async def validate_url(self, url: str):
            """–ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL"""
            return {
                "url": url,
                "valid": url.startswith(('http://', 'https://')),
                "reachable": False,
                "error": "Scraper service in fallback mode",
                "recommendations": [
                    "Install scraping dependencies",
                    "Check real scraper service status"
                ]
            }
        
        def get_supported_sites(self):
            """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã"""
            return {
                "sites": list(self.legal_sites_config.keys()),
                "total": len(self.legal_sites_config),
                "real_scraping_available": False,
                "fallback_mode": True,
                "message": "Scraper service in fallback mode"
            }
        
        async def close(self):
            """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞"""
            logger.debug("üîí Fallback scraper service cleanup completed")
    
    return FallbackScraperService()

def _create_fallback_llm_service():
    """–°–æ–∑–¥–∞—ë—Ç fallback –¥–ª—è LLM"""
    
    class FallbackLLMService:
        def __init__(self):
            self.service_type = "llm_fallback"
            self.ready = True
        
        async def answer_legal_question(self, question: str, context_documents: list, language: str = "en"):
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
            class SimpleResponse:
                def __init__(self, content, model, tokens_used, response_time, success, error=None):
                    self.content = content
                    self.model = model
                    self.tokens_used = tokens_used
                    self.response_time = response_time
                    self.success = success
                    self.error = error
            
            if language == "uk":
                content = f"""ü§ñ **FLAN-T5 —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

‚ùå –ù–∞ –∂–∞–ª—å, FLAN-T5 Small –º–æ–¥–µ–ª—å –Ω–∞—Ä–∞–∑—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.

üìö **–ó–Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:** {len(context_documents)}

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–∏

üîß **–î–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è AI:**
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å transformers
‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å HF_TOKEN —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä"""
            else:
                content = f"""ü§ñ **FLAN-T5 Service Unavailable**

**Your Question:** {question}

‚ùå Unfortunately, the FLAN-T5 Small model is currently unavailable.

üìö **Documents Found:** {len(context_documents)}

üí° **Recommendations:**
‚Ä¢ Try again in a few minutes
‚Ä¢ Check your internet connection
‚Ä¢ Contact system administrator

üîß **To restore AI:**
‚Ä¢ Check transformers installation
‚Ä¢ Set HF_TOKEN if needed
‚Ä¢ Restart the server"""
            
            return SimpleResponse(
                content=content,
                model="llm_fallback",
                tokens_used=len(content.split()),
                response_time=0.1,
                success=True
            )
        
        async def get_service_status(self):
            return {
                "service_type": "llm_fallback",
                "ready": True,
                "error": "FLAN-T5 service not available",
                "recommendations": [
                    "Check transformers installation",
                    "Verify HF_TOKEN configuration",
                    "Check internet connectivity",
                    "Restart the service"
                ]
            }
    
    return FallbackLLMService()

# ====================================
# UTILITY FUNCTIONS
# ====================================

def _is_chromadb_enabled() -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á—ë–Ω –ª–∏ ChromaDB"""
    if _document_service is None:
        return False
    return getattr(_document_service, 'service_type', '') not in ['empty_document_service']

def get_all_services():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"""
    return {
        "document": get_document_service(),
        "llm": get_llm_service(),
        "scraper": get_scraper_service()
    }

def check_services_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services = get_all_services()
    health_status = {}
    
    for service_name, service in services.items():
        try:
            service_type = getattr(service, 'service_type', 'unknown')
            is_fallback = 'fallback' in service_type or 'empty' in service_type
            
            health_status[service_name] = {
                "available": service is not None,
                "type": service_type,
                "is_fallback": is_fallback,
                "status": "degraded" if is_fallback else "healthy"
            }
            
        except Exception as e:
            health_status[service_name] = {
                "available": False,
                "error": str(e),
                "status": "error"
            }
    
    # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    overall_status = "healthy"
    fallback_count = sum(1 for status in health_status.values() if status.get("is_fallback", False))
    error_count = sum(1 for status in health_status.values() if status.get("status") == "error")
    
    if error_count > 0:
        overall_status = "error"
    elif fallback_count > 0:
        overall_status = "degraded"
    
    return {
        "overall_status": overall_status,
        "services": health_status,
        "summary": {
            "total_services": len(health_status),
            "healthy_services": len([s for s in health_status.values() if s.get("status") == "healthy"]),
            "fallback_services": fallback_count,
            "error_services": error_count
        },
        "recommendations": _get_health_recommendations(health_status)
    }

def _get_health_recommendations(health_status: Dict) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    recommendations = []
    
    for service_name, status in health_status.items():
        if status.get("is_fallback", False):
            if service_name == "document":
                recommendations.append("Install ChromaDB for better document storage")
            elif service_name == "llm":
                recommendations.append("Check transformers installation and HF_TOKEN")
            elif service_name == "scraper":
                recommendations.append("Install requests and beautifulsoup4 for web scraping")
        elif status.get("status") == "error":
            recommendations.append(f"Fix {service_name} service errors - check logs")
    
    if not recommendations:
        recommendations.append("All services are running optimally")
    
    return recommendations

# ====================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ====================================

def get_llm_config() -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM"""
    try:
        from app.config import settings
        return {
            "model": settings.LLM_MODEL,
            "max_tokens": settings.LLM_MAX_TOKENS,
            "temperature": settings.LLM_TEMPERATURE,
            "timeout": settings.LLM_TIMEOUT,
            "hf_token_configured": bool(settings.HF_TOKEN),
            "model_type": "text2text-generation"
        }
    except Exception as e:
        logger.error(f"Error getting LLM config: {e}")
        return {
            "model": "google/flan-t5-small",
            "max_tokens": 150,
            "temperature": 0.3,
            "timeout": 20,
            "hf_token_configured": False,
            "model_type": "text2text-generation",
            "error": str(e)
        }

def validate_llm_config() -> dict:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é LLM"""
    try:
        from app.config import validate_config
        return validate_config()
    except Exception as e:
        logger.error(f"Error validating LLM config: {e}")
        return {
            "valid": False,
            "issues": [f"Configuration validation failed: {e}"],
            "warnings": [],
            "memory_estimate": "~920 MB total"
        }

# ====================================
# –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨
# ====================================

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
SERVICES_AVAILABLE = True
CHROMADB_ENABLED = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def init_services():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è —Å—Ä–∞–∑—É"""
    logger.info("üì¶ Services initialize on first use")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    services = get_all_services()
    health = check_services_health()
    
    logger.info(f"üè• Services health check: {health['overall_status']}")
    logger.info(f"   Healthy: {health['summary']['healthy_services']}")
    logger.info(f"   Fallback: {health['summary']['fallback_services']}")
    logger.info(f"   Errors: {health['summary']['error_services']}")
    
    return True

# ====================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï UTILITY –§–£–ù–ö–¶–ò–ò
# ====================================

def get_memory_usage_estimate() -> Dict[str, Any]:
    """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    return {
        "flan_t5_small": "~300 MB",
        "sentence_transformers": "~90 MB",
        "chromadb": "~20 MB",
        "fastapi": "~50 MB",
        "python_runtime": "~100 MB",
        "total_estimated": "~560 MB",
        "target": "<1GB RAM",
        "efficiency": "56% of 1GB target"
    }

def get_platform_info() -> Dict[str, Any]:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ"""
    is_hf_spaces = os.getenv("SPACE_ID") is not None
    
    return {
        "platform": "HuggingFace Spaces" if is_hf_spaces else "Local",
        "is_hf_spaces": is_hf_spaces,
        "space_id": os.getenv("SPACE_ID"),
        "python_version": os.sys.version.split()[0],
        "environment_variables": {
            "USE_CHROMADB": os.getenv("USE_CHROMADB", "true"),
            "LLM_MODEL": os.getenv("LLM_MODEL", "google/flan-t5-small"),
            "LOG_LEVEL": os.getenv("LOG_LEVEL", "INFO"),
            "LLM_DEMO_MODE": os.getenv("LLM_DEMO_MODE", "false")
        }
    }

def reset_services():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    global _document_service, _llm_service, _scraper_service, _initialization_errors
    
    _document_service = None
    _llm_service = None
    _scraper_service = None
    _initialization_errors.clear()
    
    logger.info("üîÑ All services reset")

# ====================================
# –≠–ö–°–ü–û–†–¢
# ====================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    "get_document_service",
    "get_llm_service", 
    "get_scraper_service",
    "get_services_status",
    "get_all_services",
    
    # –ó–¥–æ—Ä–æ–≤—å–µ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    "check_services_health",
    "init_services",
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    "get_llm_config",
    "validate_llm_config",
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    "get_memory_usage_estimate",
    "get_platform_info",
    "reset_services",
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    "SERVICES_AVAILABLE",
    "CHROMADB_ENABLED"
]