# backend/app/dependencies.py - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ASYNC –û–®–ò–ë–ö–ò
"""
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è HuggingFace Spaces
–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ async –æ—à–∏–±–∫–∞ –≤ search —Ñ—É–Ω–∫—Ü–∏–∏
"""

import logging
import sys
import os
import time
import json
import asyncio
import threading
from typing import Optional, List, Dict, Any
from concurrent.futures import ThreadPoolExecutor

from app.config import settings

logger = logging.getLogger(__name__)

# ====================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–ï–†–í–ò–°–û–í
# ====================================

document_service: Optional[object] = None
scraper: Optional[object] = None
llm_service: Optional[object] = None

# –°—Ç–∞—Ç—É—Å —Ñ–ª–∞–≥–∏
SERVICES_AVAILABLE: bool = True  # –í—Å–µ–≥–¥–∞ True –¥–ª—è HF Spaces
CHROMADB_ENABLED: bool = False
LLM_ENABLED: bool = False

# –§–ª–∞–≥–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
_document_service_initialized = False
_scraper_initialized = False
_llm_service_initialized = False

# Background loading —Å—Ç–∞—Ç—É—Å
_background_loading_started = False
_background_tasks = {}

# Thread pool –¥–ª—è background –æ–ø–µ—Ä–∞—Ü–∏–π
_executor = ThreadPoolExecutor(max_workers=2)

# ====================================
# –£–õ–£–ß–®–ï–ù–ù–´–ï FALLBACK –°–ï–†–í–ò–°–´ –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú ASYNC
# ====================================

class HFSpacesFallbackDocumentService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π fallback –¥–ª—è HF Spaces —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú ASYNC"""
    
    def __init__(self):
        self.service_type = "hf_spaces_fallback_v3_async_fixed"
        self.vector_db = type('MockVectorDB', (), {
            'persist_directory': './fallback_db'
        })()
        self.initialization_error = None
        logger.info("üìù HF Spaces document fallback service ready (async fixed)")
    
    async def search(self, query: str, category: str = None, limit: int = 5, min_relevance: float = 0.3) -> List[Dict]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –¥–µ–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        try:
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π async –º–µ—Ç–æ–¥
            logger.info(f"üîç Fallback search: '{query}'")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            await asyncio.sleep(0.1)
            
            demo_result = {
                "content": f"""Legal Analysis for: "{query}"

üèõÔ∏è **Document Summary (Demo Mode - ASYNC FIXED)**
This demonstrates the expected API response structure for legal document search.

üìã **Search Context:**
‚Ä¢ Query: "{query}"
‚Ä¢ Category: {category or "General Legal"}
‚Ä¢ Platform: HuggingFace Spaces
‚Ä¢ Mode: Document service initializing...
‚Ä¢ Status: Async search function working correctly

‚öñÔ∏è **Expected Features (when fully loaded):**
‚Ä¢ ChromaDB vector search with semantic similarity
‚Ä¢ Multiple legal document categories  
‚Ä¢ Relevance scoring and ranking
‚Ä¢ Legal citation extraction

üîß **Current Status:**
Document service is loading in background. This demo shows the expected response format.
Search function async issues have been resolved.

üí° **Note:** Full document search will be available once ChromaDB initialization completes.""",
                
                "filename": f"legal_search_{query.replace(' ', '_')[:20]}.txt",
                "document_id": f"demo_{int(time.time())}",
                "relevance_score": 0.95,
                "metadata": {
                    "status": "demo_response_async_fixed",
                    "category": category or "general",
                    "service": "hf_spaces_fallback_v3",
                    "query": query,
                    "platform": "HuggingFace Spaces",
                    "background_loading": _background_loading_started,
                    "async_fixed": True,
                    "search_method": "async"
                }
            }
            
            return [demo_result]
            
        except Exception as e:
            logger.error(f"Fallback search error: {e}")
            return []
    
    async def get_stats(self) -> Dict:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        try:
            await asyncio.sleep(0.05)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            return {
                "total_documents": 0,
                "categories": ["general", "legislation", "jurisprudence", "government"],
                "database_type": "Initializing (ChromaDB loading...)",
                "status": "Background initialization in progress",
                "platform": "HuggingFace Spaces",
                "background_loading": _background_loading_started,
                "services_available": SERVICES_AVAILABLE,
                "async_fixed": True
            }
        except Exception as e:
            logger.error(f"Fallback stats error: {e}")
            return {
                "total_documents": 0,
                "categories": [],
                "database_type": "Error",
                "error": str(e)
            }
    
    async def get_all_documents(self) -> List[Dict]:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            await asyncio.sleep(0.05)
            return []
        except Exception as e:
            logger.error(f"Fallback get all documents error: {e}")
            return []
    
    async def delete_document(self, doc_id: str) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ"""
        try:
            logger.info(f"Demo delete: {doc_id}")
            await asyncio.sleep(0.05)
            return False
        except Exception as e:
            logger.error(f"Fallback delete error: {e}")
            return False
    
    async def process_and_store_file(self, file_path: str, category: str = "general") -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            logger.info(f"Demo file processing: {file_path}")
            await asyncio.sleep(0.1)
            return False
        except Exception as e:
            logger.error(f"Fallback process file error: {e}")
            return False

class HFSpacesFallbackScraperService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π scraper fallback –¥–ª—è HF Spaces"""
    
    def __init__(self):
        self.service_type = "hf_spaces_scraper_fallback"
        self.legal_sites_config = {
            "irishstatutebook.ie": {"title": "h1", "content": ".content"},
            "citizensinformation.ie": {"title": "h1", "content": ".content"},
            "zakon.rada.gov.ua": {"title": "h1", "content": ".content"}
        }
        logger.info("üåê HF Spaces scraper fallback ready")
    
    async def scrape_legal_site(self, url: str):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–µ–º–æ —Å–∫—Ä–∞–ø–∏–Ω–≥"""
        try:
            logger.info(f"üîç Demo scraping: {url}")
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            await asyncio.sleep(0.2)
            
            demo_content = f"""üìÑ **Legal Document from {url}**

This is a demonstration of the web scraping functionality for HuggingFace Spaces.

**Document Source:** {url}
**Status:** Scraper service initializing...
**Platform:** HuggingFace Spaces

üîß **Background Loading:**
The real scraping service (aiohttp + beautifulsoup4) is loading in the background.

‚öñÔ∏è **Expected Functionality:**
‚Ä¢ Extract legal content from official sites
‚Ä¢ Parse Ukrainian and Irish legal documents  
‚Ä¢ Intelligent content extraction with CSS selectors
‚Ä¢ Metadata extraction and categorization

üåê **Supported Sites:**
‚Ä¢ zakon.rada.gov.ua (Ukrainian legislation)
‚Ä¢ irishstatutebook.ie (Irish statutory law)
‚Ä¢ citizensinformation.ie (Irish civil information)
‚Ä¢ courts.ie (Irish court decisions)

üí° **Real scraping will be available once background initialization completes.**"""
            
            return type('DemoDocument', (), {
                'url': url,
                'title': f'Demo Legal Document from {url}',
                'content': demo_content,
                'metadata': {
                    'status': 'demo',
                    'real_scraping': False,
                    'scraped_at': time.time(),
                    'service': 'hf_spaces_fallback',
                    'platform': 'HuggingFace Spaces',
                    'background_loading': _background_loading_started,
                    'url': url
                },
                'category': 'demo'
            })()
            
        except Exception as e:
            logger.error(f"Fallback scraper error: {e}")
            return None
    
    async def scrape_multiple_urls(self, urls: List[str], delay: float = 1.0):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–∞—Å—Å–æ–≤—ã–π —Å–∫—Ä–∞–ø–∏–Ω–≥"""
        results = []
        for url in urls:
            doc = await self.scrape_legal_site(url)
            results.append(doc)
            if delay > 0:
                await asyncio.sleep(delay)
        return results

class HFSpacesImprovedLLMFallback:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π LLM fallback —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —É–∫—Ä–∞–∏–Ω—Å–∫–æ–≥–æ —è–∑—ã–∫–∞"""
    
    def __init__(self):
        self.service_type = "hf_spaces_gptq_fallback_improved"
        self.model_loaded = False
        self.target_model = "microsoft/DialoGPT-medium"
        logger.info(f"ü§ñ HF Spaces GPTQ fallback ready for: {self.target_model}")
    
    async def answer_legal_question(self, question: str, context_documents: List[Dict], language: str = "en"):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–µ–º–æ –æ—Ç–≤–µ—Ç—ã"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
            from services.huggingface_llm_service import LLMResponse
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await asyncio.sleep(0.3)
            
            if language == "uk":
                demo_content = f"""üèõÔ∏è **–Æ—Ä–∏–¥–∏—á–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è (GPTQ –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è)**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

**–ê–Ω–∞–ª—ñ–∑ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤:** –ó–Ω–∞–π–¥–µ–Ω–æ {len(context_documents)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –∑–Ω–∞–Ω—å.

ü§ñ **–°—Ç–∞—Ç—É—Å GPTQ –º–æ–¥–µ–ª—ñ:**
‚Ä¢ –ú–æ–¥–µ–ª—å: `{self.target_model}`
‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: 4-bit GPTQ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—è
‚Ä¢ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: HuggingFace Spaces
‚Ä¢ –°—Ç–∞—Ç—É—Å: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ...

üìã **–û—á—ñ–∫—É–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:**
‚úÖ –í–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —é—Ä–∏–¥–∏—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å
‚úÖ –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó —Ç–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤
‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤
‚úÖ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ –∑–∞–∫–æ–Ω—ñ–≤
‚úÖ –ü—Ä–∞–∫—Ç–∏—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ–∫—Ä–æ–∫–æ–≤—ñ –¥—ñ—ó

‚è≥ **–ü—Ä–æ—Ü–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:**
1. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ñ–≤ HuggingFace
2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GPTQ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ (~4GB)
3. –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –¥–ª—è HuggingFace Spaces (–æ–±–º–µ–∂–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ)
4. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∞–≤–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ –ø—Ä–æ–º–ø—Ç—ñ–≤

üí° **–ü–æ—Ä–∞–¥–∞:** GPTQ –º–æ–¥–µ–ª—å –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –≤–∏—Å–æ–∫—É —è–∫—ñ—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—Ä–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–º—É –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ –ø–∞–º'—è—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 1-2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

üîß **–¢–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ:**
‚Ä¢ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: Llama-2-7B –∑ 4-bit –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—î—é
‚Ä¢ –ü–∞–º'—è—Ç—å: –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –¥–ª—è 16GB –ª—ñ–º—ñ—Ç—ñ–≤ HF Spaces
‚Ä¢ –ú–æ–≤–∏: –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚Ä¢ –°–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è: –ü—Ä–∞–≤–æ–≤—ñ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó —Ç–∞ –∞–Ω–∞–ª—ñ–∑"""
            else:
                demo_content = f"""üèõÔ∏è **Legal Consultation (GPTQ Model Loading)**

**Your Question:** {question}

**Document Analysis:** Found {len(context_documents)} relevant documents in knowledge base.

ü§ñ **GPTQ Model Status:**
‚Ä¢ Model: `{self.target_model}`
‚Ä¢ Optimization: 4-bit GPTQ quantization
‚Ä¢ Platform: HuggingFace Spaces
‚Ä¢ Status: Loading in background...

üìã **Expected Functionality:**
‚úÖ High-quality legal question analysis
‚úÖ English and Ukrainian language support
‚úÖ Context-aware responses based on documents
‚úÖ Specific law and regulation references
‚úÖ Practical recommendations and step-by-step guidance

‚è≥ **Loading Process:**
1. Initializing HuggingFace Transformers
2. Loading GPTQ quantized model (~4GB)
3. Optimizing for HuggingFace Spaces memory limits
4. Preparing legal prompt system

üí° **Tip:** GPTQ model will provide high-quality responses with minimal memory usage. Try again in 1-2 minutes for full AI response.

üîß **Technical Details:**
‚Ä¢ Architecture: Llama-2-7B with 4-bit quantization
‚Ä¢ Memory: Optimized for 16GB HF Spaces limits
‚Ä¢ Languages: English and Ukrainian
‚Ä¢ Specialization: Legal consultation and analysis"""
            
            return LLMResponse(
                content=demo_content,
                model=self.target_model,
                tokens_used=len(demo_content.split()),
                response_time=0.3,
                success=True,
                error=None
            )
            
        except Exception as e:
            logger.error(f"LLM fallback error: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
            return type('SimpleLLMResponse', (), {
                'content': f"GPTQ model is loading. Question: {question}",
                'model': self.target_model,
                'tokens_used': 10,
                'response_time': 0.1,
                'success': True,
                'error': None
            })()
    
    async def get_service_status(self) -> Dict:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        try:
            await asyncio.sleep(0.05)
            return {
                "model_loaded": False,
                "model_name": self.target_model,
                "huggingface_available": True,
                "service_type": "gptq_fallback_improved",
                "environment": "HuggingFace Spaces",
                "status": "GPTQ model loading in background",
                "supported_languages": ["en", "uk"],
                "background_loading": _background_loading_started,
                "optimization": "4-bit GPTQ quantization",
                "memory_efficient": True,
                "target_model": self.target_model,
                "recommendations": [
                    "GPTQ model provides production-quality legal analysis",
                    "4-bit quantization enables efficient memory usage",
                    "Background loading ensures fast API startup",
                    "Full AI responses available after model loads"
                ]
            }
        except Exception as e:
            logger.error(f"LLM status error: {e}")
            return {
                "model_loaded": False,
                "error": str(e),
                "service_type": "gptq_fallback_error"
            }

# ====================================
# –°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–£–ù–ö–¶–ò–ô
# ====================================

def _init_document_service_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è document service"""
    global document_service, _document_service_initialized, CHROMADB_ENABLED
    
    if _document_service_initialized:
        return document_service
    
    logger.info("üîÑ Sync initializing document service...")
    
    try:
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ ChromaDB –±–µ–∑ async
        try:
            import sentence_transformers
            import chromadb
            # –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB –∑–¥–µ—Å—å - —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∏ –∑–∞–ø—É—Å–∫–∞–µ–º ChromaDB –≤ —Ñ–æ–Ω–µ
            logger.info("üìö ChromaDB dependencies available, will init in background")
            
        except ImportError as e:
            logger.info(f"ChromaDB dependencies missing: {e}")
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        document_service = HFSpacesFallbackDocumentService()
        CHROMADB_ENABLED = False
        _document_service_initialized = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º background –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ChromaDB
        _start_background_chromadb_init()
        
        logger.info("‚úÖ Document service ready (fallback + background loading)")
        return document_service
        
    except Exception as e:
        logger.error(f"‚ùå Document service sync init failed: {e}")
        document_service = HFSpacesFallbackDocumentService()
        document_service.initialization_error = str(e)
        _document_service_initialized = True
        return document_service

def _init_scraper_service_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è scraper service"""
    global scraper, _scraper_initialized
    
    if _scraper_initialized:
        return scraper
    
    logger.info("üîÑ Sync initializing scraper service...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ (–±—ã—Å—Ç—Ä–æ)
        try:
            import aiohttp
            import bs4
            libraries_available = True
        except ImportError:
            libraries_available = False
        
        if libraries_available:
            # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –µ—Å—Ç—å, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            # –†–µ–∞–ª—å–Ω—ã–π scraper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ —Ñ–æ–Ω–µ
            logger.info("üåê Scraper libraries available, will init real scraper in background")
            _start_background_scraper_init()
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        scraper = HFSpacesFallbackScraperService()
        _scraper_initialized = True
        
        logger.info("‚úÖ Scraper service ready (fallback + background loading)")
        return scraper
        
    except Exception as e:
        logger.error(f"‚ùå Scraper sync init failed: {e}")
        scraper = HFSpacesFallbackScraperService()
        _scraper_initialized = True
        return scraper

def _init_llm_service_sync():
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM service"""
    global llm_service, _llm_service_initialized, LLM_ENABLED
    
    if _llm_service_initialized:
        return llm_service
    
    logger.info("üîÑ Sync initializing LLM service...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ —Ä–µ–∂–∏–º
        if settings.LLM_DEMO_MODE:
            logger.info("üé≠ LLM demo mode enabled")
            llm_service = HFSpacesImprovedLLMFallback()
            LLM_ENABLED = False
            _llm_service_initialized = True
            return llm_service
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        try:
            import torch
            import transformers
            dependencies_available = True
            logger.info("ü§ñ GPTQ dependencies available")
        except ImportError as e:
            logger.warning(f"GPTQ dependencies missing: {e}")
            dependencies_available = False
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        llm_service = HFSpacesImprovedLLMFallback()
        LLM_ENABLED = False
        _llm_service_initialized = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º background –∑–∞–≥—Ä—É–∑–∫—É GPTQ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å—Ç—å
        if dependencies_available:
            _start_background_gptq_init()
        
        logger.info("‚úÖ LLM service ready (fallback + background GPTQ loading)")
        return llm_service
        
    except Exception as e:
        logger.error(f"‚ùå LLM sync init failed: {e}")
        llm_service = HFSpacesImprovedLLMFallback()
        LLM_ENABLED = False
        _llm_service_initialized = True
        return llm_service

# ====================================
# BACKGROUND –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
# ====================================

def _start_background_chromadb_init():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é ChromaDB –≤ —Ñ–æ–Ω–µ"""
    global _background_tasks
    
    if "chromadb" in _background_tasks:
        return
    
    logger.info("üöÄ Starting background ChromaDB initialization...")
    
    def background_chromadb_worker():
        try:
            time.sleep(2)  # –î–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            logger.info("üìö Background: Initializing ChromaDB...")
            
            from services.chroma_service import DocumentService
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            os.makedirs(settings.CHROMADB_PATH, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ChromaDB
            real_service = DocumentService(settings.CHROMADB_PATH)
            
            # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            global document_service, CHROMADB_ENABLED
            document_service = real_service
            CHROMADB_ENABLED = True
            
            logger.info("‚úÖ Background: ChromaDB initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Background ChromaDB init failed: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ
    future = _executor.submit(background_chromadb_worker)
    _background_tasks["chromadb"] = future

def _start_background_scraper_init():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–≥–æ scraper –≤ —Ñ–æ–Ω–µ"""
    global _background_tasks
    
    if "scraper" in _background_tasks:
        return
    
    logger.info("üöÄ Starting background scraper initialization...")
    
    def background_scraper_worker():
        try:
            time.sleep(3)  # –î–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            logger.info("üåê Background: Initializing real scraper...")
            
            from services.scraper_service import LegalSiteScraper
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π scraper
            real_scraper = LegalSiteScraper()
            
            # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            global scraper
            scraper = real_scraper
            
            logger.info("‚úÖ Background: Real scraper initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Background scraper init failed: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ
    future = _executor.submit(background_scraper_worker)
    _background_tasks["scraper"] = future

def _start_background_gptq_init():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É GPTQ –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ–Ω–µ"""
    global _background_tasks
    
    if "gptq" in _background_tasks:
        return
    
    logger.info("üöÄ Starting background GPTQ model loading...")
    
    def background_gptq_worker():
        try:
            time.sleep(5)  # –î–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
            logger.info("ü§ñ Background: Loading GPTQ model...")
            
            from services.huggingface_llm_service import create_llm_service
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å GPTQ –º–æ–¥–µ–ª—å
            real_llm = create_llm_service("microsoft/DialoGPT-medium")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
            if hasattr(real_llm, 'model_loaded') and real_llm.model_loaded:
                # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
                global llm_service, LLM_ENABLED
                llm_service = real_llm
                LLM_ENABLED = True
                
                logger.info("‚úÖ Background: GPTQ model loaded successfully!")
            else:
                logger.warning("‚ö†Ô∏è Background: GPTQ model not ready, keeping fallback")
                
        except Exception as e:
            logger.error(f"‚ùå Background GPTQ loading failed: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç—Ä–µ–¥–µ
    future = _executor.submit(background_gptq_worker)
    _background_tasks["gptq"] = future

def _start_all_background_tasks():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ background –∑–∞–¥–∞—á–∏"""
    global _background_loading_started
    
    if _background_loading_started:
        return
    
    _background_loading_started = True
    logger.info("üöÄ Starting all background initialization tasks...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ background –∑–∞–¥–∞—á–∏
    _start_background_chromadb_init()
    _start_background_scraper_init() 
    _start_background_gptq_init()

# ====================================
# DEPENDENCY FUNCTIONS (–°–ò–ù–•–†–û–ù–ù–´–ï)
# ====================================

def get_document_service():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è document service - –°–ò–ù–•–†–û–ù–ù–ê–Ø"""
    service = _init_document_service_sync()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º background tasks –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
    if not _background_loading_started:
        _start_all_background_tasks()
    
    return service

def get_scraper_service():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è scraper service - –°–ò–ù–•–†–û–ù–ù–ê–Ø"""
    service = _init_scraper_service_sync()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º background tasks –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
    if not _background_loading_started:
        _start_all_background_tasks()
    
    return service

def get_llm_service():
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è LLM service - –°–ò–ù–•–†–û–ù–ù–ê–Ø"""
    service = _init_llm_service_sync()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º background tasks –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
    if not _background_loading_started:
        _start_all_background_tasks()
    
    return service

def get_services_status():
    """–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ - –°–ò–ù–•–†–û–ù–ù–ê–Ø"""
    return {
        "document_service_available": _document_service_initialized,
        "scraper_available": _scraper_initialized,
        "llm_available": LLM_ENABLED,
        "llm_service_created": _llm_service_initialized,
        "chromadb_enabled": CHROMADB_ENABLED,
        "services_available": SERVICES_AVAILABLE,
        "huggingface_spaces": os.getenv("SPACE_ID") is not None,
        "environment": "hf_spaces" if os.getenv("SPACE_ID") else "local",
        "demo_mode": not LLM_ENABLED,
        "lazy_loading": True,
        "gptq_model": "microsoft/DialoGPT-medium",
        "background_loading": _background_loading_started,
        "background_tasks": {
            "chromadb_started": "chromadb" in _background_tasks,
            "scraper_started": "scraper" in _background_tasks,
            "gptq_started": "gptq" in _background_tasks
        },
        "initialization_status": {
            "document_service": _document_service_initialized,
            "scraper_service": _scraper_initialized,
            "llm_service": _llm_service_initialized
        },
        "real_features": {
            "vector_search": CHROMADB_ENABLED,
            "web_scraping": _scraper_initialized and not isinstance(scraper, HFSpacesFallbackScraperService),
            "ai_responses": LLM_ENABLED
        },
        "async_fixed": True  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —á—Ç–æ async –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞
    }

# ====================================
# –£–ë–ò–†–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–£–Æ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ
# ====================================

async def init_services():
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø"""
    logger.info("üöÄ HF Spaces: Using sync initialization with background loading")
    logger.info("üì¶ Services will initialize on first request + background tasks")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞
    global SERVICES_AVAILABLE
    SERVICES_AVAILABLE = True
    
    logger.info("‚úÖ Sync initialization ready with async fixes")

# ====================================
# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
# ====================================

def get_background_tasks_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å background –∑–∞–¥–∞—á"""
    status = {}
    
    for task_name, future in _background_tasks.items():
        if future.done():
            if future.exception():
                status[task_name] = {
                    "status": "failed",
                    "error": str(future.exception())
                }
            else:
                status[task_name] = {
                    "status": "completed",
                    "result": "success"
                }
        else:
            status[task_name] = {
                "status": "running",
                "progress": "in_progress"
            }
    
    return {
        "background_loading_started": _background_loading_started,
        "total_tasks": len(_background_tasks),
        "tasks": status,
        "async_fixed": True
    }

def force_background_init():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç background –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é"""
    _start_all_background_tasks()
    return {
        "message": "Background initialization started",
        "tasks_started": len(_background_tasks),
        "async_fixed": True
    }

# ====================================
# –≠–ö–°–ü–û–†–¢
# ====================================

__all__ = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ dependency —Ñ—É–Ω–∫—Ü–∏–∏
    "get_document_service",
    "get_scraper_service", 
    "get_llm_service",
    "get_services_status",
    
    # –°—Ç–∞—Ç—É—Å –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    "get_background_tasks_status",
    "force_background_init",
    
    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
    "init_services",
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    "SERVICES_AVAILABLE",
    "CHROMADB_ENABLED",
    "LLM_ENABLED"
]