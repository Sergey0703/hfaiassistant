# ====================================
# –§–ê–ô–õ: backend/app/__init__.py (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ö–û–†–ù–ï–í–û–ì–û –ú–ê–†–®–†–£–¢–ê)
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
# ====================================

"""
FastAPI Application Factory - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è HuggingFace Spaces
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –£–±—Ä–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç @app.get("/") –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã React SPA
"""

import logging
import sys
import os
import time
from pathlib import Path
from typing import Dict, Any
from contextlib import asynccontextmanager

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = Path(__file__).parent.parent
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: "FastAPI"):
    """
    Lifespan context manager –¥–ª—è FastAPI - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± startup/shutdown
    –ó–∞–º–µ–Ω—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ @app.on_event("startup")/@app.on_event("shutdown")
    """
    # Startup logic
    logger.info("üöÄ FastAPI application starting up...")
    
    # –ù–ï –≤—ã–∑—ã–≤–∞–µ–º init_services() - –∏—Å–ø–æ–ª—å–∑—É–µ–º lazy loading
    logger.info("üîÑ Lazy initialization enabled - services will load on demand")
    
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
    app.state.startup_time = time.time()
    app.state.lazy_loading = True
    
    logger.info("‚úÖ Application startup completed with lazy loading")
    
    yield  # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # Shutdown logic
    logger.info("üõë FastAPI application shutting down...")
    
    # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º LLM —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        from app.dependencies import llm_service, _llm_service_initialized
        if _llm_service_initialized and hasattr(llm_service, 'close'):
            await llm_service.close()
            logger.info("üîí LLM service closed")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º scraper —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω  
        from app.dependencies import scraper, _scraper_initialized
        if _scraper_initialized and hasattr(scraper, 'close'):
            await scraper.close()
            logger.info("üîí Scraper service closed")
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Error during cleanup: {e}")
    
    logger.info("‚úÖ Application shutdown completed")

def create_app() -> "FastAPI":
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è HF Spaces
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç @app.get("/") –¥–ª—è React SPA
    """
    try:
        # –ò–º–ø–æ—Ä—Ç—ã FastAPI
        from fastapi import FastAPI
        from fastapi.middleware.cors import CORSMiddleware
        from fastapi.responses import JSONResponse
        
        logger.info("üöÄ Creating FastAPI application...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from app.config import settings, API_METADATA, API_TAGS
            app_config = {
                "title": API_METADATA["title"],
                "version": API_METADATA["version"], 
                "description": API_METADATA["description"],
                "openapi_tags": API_TAGS,
                "lifespan": lifespan  # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π lifespan
            }
            config_loaded = True
        except ImportError as e:
            logger.warning(f"Config import failed: {e}, using defaults")
            app_config = {
                "title": "Legal Assistant API",
                "version": "2.0.0",
                "description": "AI Legal Assistant with GPTQ model support",
                "lifespan": lifespan
            }
            config_loaded = False
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = FastAPI(**app_config)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        initialization_status = {
            "config_loaded": config_loaded,
            "api_routes_loaded": False,
            "middleware_loaded": False,
            "errors": [],
            "lazy_loading_enabled": True,  # –ù–û–í–û–ï: –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º lazy loading
            "lifespan_configured": True,   # –ù–û–í–û–ï: –æ—Ç–º–µ—á–∞–µ–º —á—Ç–æ lifespan –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            "react_spa_ready": False       # –ù–û–í–û–ï: —Å—Ç–∞—Ç—É—Å React SPA
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ app.state –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ endpoints
        app.state.initialization_status = initialization_status
        app.state.hf_spaces = os.getenv("SPACE_ID") is not None
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
        try:
            cors_origins = getattr(settings, 'CORS_ORIGINS', ["*"]) if config_loaded else ["*"]
            app.add_middleware(
                CORSMiddleware,
                allow_origins=cors_origins,
                allow_credentials=True,
                allow_methods=["*"],
                allow_headers=["*"],
            )
            logger.info("‚úÖ CORS middleware configured")
        except Exception as e:
            logger.error(f"‚ùå CORS configuration failed: {e}")
            initialization_status["errors"].append(f"CORS setup failed: {e}")
        
        # ====================================
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ë–ò–†–ê–ï–ú –ö–û–†–ù–ï–í–û–ô –ú–ê–†–®–†–£–¢!
        # ====================================
        # –°–¢–ê–†–´–ô –ö–û–î (–£–î–ê–õ–Å–ù):
        # @app.get("/")
        # async def root():
        #     return {"message": "Legal Assistant API with GPTQ model support", ...}
        
        # –¢–ï–ü–ï–†–¨ –ö–û–†–ù–ï–í–û–ô –ü–£–¢–¨ "/" –ë–£–î–ï–¢ –î–û–°–¢–£–ü–ï–ù –î–õ–Ø REACT SPA!
        
        # ====================================
        # –ë–ê–ó–û–í–´–ï API –ú–ê–†–®–†–£–¢–´ (–ù–ï –ö–û–†–ù–ï–í–´–ï)
        # ====================================
        
        @app.get("/health")
        async def health_check():
            """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å lazy loading –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
            try:
                # –ù–µ —Ñ–æ—Ä—Å–∏—Ä—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è health check
                from app.dependencies import get_services_status
                services_status = get_services_status()
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ lazy loading
                overall_status = "healthy"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–¥–æ—Ä–æ–≤—ã —Å lazy loading
                issues = []
                recommendations = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                if initialization_status["errors"]:
                    overall_status = "degraded"
                    issues.extend(initialization_status["errors"])
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è lazy loading
                if not services_status.get("llm_available", False):
                    recommendations.append("GPTQ model will load on first chat request")
                
                if not services_status.get("chromadb_enabled", False):
                    recommendations.append("ChromaDB will initialize on first document search")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º React SPA
                react_ready = initialization_status.get("react_spa_ready", False)
                
                response_data = {
                    "status": overall_status,
                    "timestamp": time.time(),
                    "platform": "HuggingFace Spaces" if app.state.hf_spaces else "Local",
                    "initialization": initialization_status,
                    "services": services_status,
                    "react_spa": {
                        "enabled": react_ready,
                        "note": "React SPA mounted on root path (/)"
                    },
                    "lazy_loading": {
                        "enabled": True,
                        "description": "Services initialize on first use",
                        "benefits": [
                            "Faster application startup",
                            "Reduced memory usage at startup", 
                            "Graceful service degradation",
                            "Better error isolation"
                        ]
                    },
                    "version": app_config.get("version", "2.0.0")
                }
                
                if issues:
                    response_data["issues"] = issues
                
                if recommendations:
                    response_data["recommendations"] = recommendations
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTP —Å—Ç–∞—Ç—É—Å
                status_code = 200 if overall_status == "healthy" else 207  # 207 = Multi-Status
                
                return JSONResponse(content=response_data, status_code=status_code)
                
            except Exception as e:
                logger.error(f"Health check error: {e}")
                return JSONResponse(
                    status_code=503,
                    content={
                        "status": "unhealthy", 
                        "error": str(e),
                        "timestamp": time.time(),
                        "message": "Health check failed",
                        "platform": "HuggingFace Spaces" if app.state.hf_spaces else "Local"
                    }
                )
        
        @app.get("/api-status")
        async def api_status():
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ API (–∑–∞–º–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞)"""
            return {
                "message": "Legal Assistant API with GPTQ model support",
                "version": app_config.get("version", "2.0.0"),
                "status": "healthy",
                "platform": "HuggingFace Spaces" if app.state.hf_spaces else "Local",
                "model": "TheBloke/Llama-2-7B-Chat-GPTQ",
                "features": {
                    "lazy_loading": True,
                    "gptq_support": True,
                    "ukrainian_language": True,
                    "vector_search": "Available on demand",
                    "demo_responses": "Available immediately",
                    "react_spa": "Mounted on root path (/)"
                },
                "docs": "/docs",
                "health": "/health",
                "hf_health": "/hf-spaces-health",
                "model_status": "/model-status",
                "startup_progress": "/startup-progress",
                "note": "Root path (/) now serves React SPA instead of this JSON"
            }
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç–µ—Ä—ã
        try:
            from api import configure_fastapi_app
            configure_fastapi_app(app)
            logger.info("‚úÖ API routes configured")
            initialization_status["api_routes_loaded"] = True
        except Exception as e:
            error_msg = f"Failed to configure API routes: {e}"
            logger.error(f"‚ùå {error_msg}")
            initialization_status["errors"].append(error_msg)
            
            # –î–æ–±–∞–≤–ª—è–µ–º fallback endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            @app.get("/api/status")
            async def api_routes_status():
                return {
                    "status": "‚ùå API routes NOT CONFIGURED",
                    "error": str(e),
                    "message": "Some API endpoints may be unavailable",
                    "available_endpoints": [
                        "GET /health - Health check",
                        "GET /api-status - API status (former root)",
                        "GET /docs - API documentation",
                        "GET /api/status - This endpoint"
                    ],
                    "recommendations": [
                        "Check that all API modules are present",
                        "Verify import dependencies",
                        "Some functionality may still work via direct endpoints"
                    ]
                }
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º middleware
        try:
            from app.middleware import setup_middleware
            setup_middleware(app)
            logger.info("‚úÖ Middleware configured")
            initialization_status["middleware_loaded"] = True
        except Exception as e:
            error_msg = f"Middleware setup failed: {e}"
            logger.warning(f"‚ö†Ô∏è {error_msg}")
            initialization_status["errors"].append(error_msg)
            # Middleware –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @app.exception_handler(404)
        async def not_found_handler(request, exc):
            return JSONResponse(
                status_code=404,
                content={
                    "detail": f"Endpoint not found: {request.url.path}",
                    "available_endpoints": {
                        "health": "/health", 
                        "docs": "/docs",
                        "api_info": "/api-status",
                        "hf_spaces_health": "/hf-spaces-health"
                    },
                    "suggestion": "Check /docs for available endpoints",
                    "platform": "HuggingFace Spaces" if app.state.hf_spaces else "Local",
                    "note": "Root path (/) now serves React SPA"
                }
            )
        
        @app.exception_handler(500)
        async def internal_error_handler(request, exc):
            logger.error(f"Internal server error on {request.url.path}: {exc}")
            return JSONResponse(
                status_code=500,
                content={
                    "detail": "Internal server error",
                    "path": str(request.url.path),
                    "timestamp": time.time(),
                    "help": "Check server logs for details",
                    "platform": "HuggingFace Spaces" if app.state.hf_spaces else "Local",
                    "lazy_loading": "Services may still be initializing"
                }
            )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        total_errors = len(initialization_status["errors"])
        
        if total_errors == 0:
            logger.info("‚úÖ FastAPI application created successfully with lazy loading")
        else:
            logger.warning(f"‚ö†Ô∏è Application created with {total_errors} non-critical errors")
            for error in initialization_status["errors"]:
                logger.warning(f"   - {error}")
        
        logger.info("üîÑ Lazy loading enabled - services will initialize on demand")
        logger.info("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç (/) —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è React SPA")
        
        return app
        
    except ImportError as e:
        logger.error(f"‚ùå Missing critical dependencies: {e}")
        logger.error("Install: pip install fastapi uvicorn")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        try:
            from fastapi import FastAPI
            fallback_app = FastAPI(title="Legal Assistant API - Dependency Error")
            
            @fallback_app.get("/api-status")
            async def dependency_error():
                return {
                    "status": "dependency_error",
                    "error": str(e),
                    "message": "Critical dependencies missing",
                    "required": ["fastapi", "uvicorn"],
                    "install_command": "pip install fastapi uvicorn",
                    "note": "Root path (/) available for React SPA after fixing dependencies"
                }
            
            return fallback_app
            
        except ImportError:
            # –î–∞–∂–µ FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.critical("‚ùå FastAPI not available - cannot create any application")
            raise
    
    except Exception as e:
        logger.error(f"‚ùå Critical error during application creation: {e}")
        
        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
        try:
            from fastapi import FastAPI
            emergency_app = FastAPI(title="Legal Assistant API - Emergency Mode")
            
            @emergency_app.get("/api-status")
            async def emergency_mode():
                return {
                    "status": "emergency_mode",
                    "error": str(e),
                    "message": "Application failed to initialize properly",
                    "timestamp": time.time(),
                    "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
                    "note": "Root path (/) available for React SPA in normal mode"
                }
            
            return emergency_app
            
        except Exception as final_error:
            logger.critical(f"‚ùå Cannot create even emergency application: {final_error}")
            raise

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "create_app",
    "lifespan"
]