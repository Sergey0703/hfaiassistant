# ====================================
# –§–ê–ô–õ: backend/api/__init__.py (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø)
# ====================================

"""
API Package - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤
"""

import logging
from fastapi import FastAPI, HTTPException
from fastapi.responses import JSONResponse
import time

logger = logging.getLogger(__name__)

def configure_fastapi_app(app: FastAPI):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –≤—Å–µ API –º–∞—Ä—à—Ä—É—Ç—ã"""
    
    initialization_status = {
        "user_routes": False,
        "admin_routes": False,
        "total_routes": 0,
        "errors": []
    }
    
    try:
        logger.info("üöÄ Configuring API routes...")
        
        # ====================================
        # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´
        # ====================================
        try:
            logger.info("üì± Loading user routes...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
            from api.user.chat import router as chat_router
            from api.user.search import router as search_router
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            app.include_router(
                chat_router, 
                prefix="/api/user", 
                tags=["User Chat"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            app.include_router(
                search_router, 
                prefix="/api/user", 
                tags=["User Search"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            initialization_status["user_routes"] = True
            initialization_status["total_routes"] += 4  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ user routes
            logger.info("‚úÖ User routes configured successfully")
            
        except ImportError as e:
            error_msg = f"User routes import failed: {e}"
            logger.error(f"‚ùå {error_msg}")
            initialization_status["errors"].append(error_msg)
            
            # –°–æ–∑–¥–∞–µ–º fallback user routes
            @app.get("/api/user/status")
            async def user_status():
                return {
                    "status": "‚ùå User routes not available",
                    "error": str(e),
                    "message": "User API modules missing"
                }
        
        # ====================================
        # –ê–î–ú–ò–ù–°–ö–ò–ï –ú–ê–†–®–†–£–¢–´
        # ====================================
        try:
            logger.info("üîß Loading admin routes...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ—É—Ç–µ—Ä—ã
            from api.admin.documents import router as admin_docs_router
            from api.admin.scraper import router as admin_scraper_router
            from api.admin.stats import router as admin_stats_router
            from api.admin.llm import router as admin_llm_router
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            app.include_router(
                admin_docs_router, 
                prefix="/api/admin", 
                tags=["Admin Documents"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            app.include_router(
                admin_scraper_router, 
                prefix="/api/admin", 
                tags=["Admin Scraper"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            app.include_router(
                admin_stats_router, 
                prefix="/api/admin", 
                tags=["Admin Statistics"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            app.include_router(
                admin_llm_router, 
                prefix="/api/admin", 
                tags=["Admin LLM"],
                responses={
                    404: {"description": "Not found"},
                    500: {"description": "Internal server error"}
                }
            )
            
            initialization_status["admin_routes"] = True
            initialization_status["total_routes"] += 15  # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ admin routes
            logger.info("‚úÖ Admin routes configured successfully")
            
        except ImportError as e:
            error_msg = f"Admin routes import failed: {e}"
            logger.error(f"‚ùå {error_msg}")
            initialization_status["errors"].append(error_msg)
            
            # –°–æ–∑–¥–∞–µ–º fallback admin routes
            @app.get("/api/admin/status")
            async def admin_status():
                return {
                    "status": "‚ùå Admin routes not available",
                    "error": str(e),
                    "message": "Admin API modules missing",
                    "recommendations": [
                        "Check that all admin API files exist",
                        "Verify imports in admin modules",
                        "Check dependencies installation"
                    ]
                }
        
        # ====================================
        # –û–ë–©–ò–ï API –ú–ê–†–®–†–£–¢–´
        # ====================================
        
        @app.get("/api")
        async def api_root():
            """–ö–æ—Ä–Ω–µ–≤–æ–π API endpoint —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö"""
            return {
                "message": "Legal Assistant API",
                "version": "2.0.0",
                "status": "operational",
                "initialization": initialization_status,
                "endpoints": {
                    "user": {
                        "chat": "/api/user/chat",
                        "search": "/api/user/search",
                        "history": "/api/user/chat/history"
                    },
                    "admin": {
                        "documents": "/api/admin/documents",
                        "scraper": "/api/admin/scraper",
                        "stats": "/api/admin/stats", 
                        "llm": "/api/admin/llm"
                    },
                    "system": {
                        "health": "/health",
                        "docs": "/docs",
                        "redoc": "/redoc"
                    }
                },
                "documentation": {
                    "swagger": "/docs",
                    "redoc": "/redoc",
                    "openapi": "/openapi.json"
                }
            }
        
        @app.get("/api/health")
        async def api_health():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
            try:
                from app.dependencies import get_services_status
                services_status = get_services_status()
                
                overall_status = "healthy"
                issues = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ä—à—Ä—É—Ç–æ–≤
                if not initialization_status["user_routes"]:
                    overall_status = "degraded"
                    issues.append("User routes not loaded")
                
                if not initialization_status["admin_routes"]:
                    overall_status = "degraded" if overall_status == "healthy" else "unhealthy"
                    issues.append("Admin routes not loaded")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã
                if not services_status.get("document_service_available", False):
                    overall_status = "degraded" if overall_status == "healthy" else "unhealthy"
                    issues.append("Document service unavailable")
                
                response_data = {
                    "status": overall_status,
                    "timestamp": time.time(),
                    "api_routes": initialization_status,
                    "services": services_status,
                    "total_routes_loaded": initialization_status["total_routes"]
                }
                
                if issues:
                    response_data["issues"] = issues
                    response_data["recommendations"] = [
                        "Check server logs for detailed errors",
                        "Verify all API modules are present",
                        "Restart server after fixing issues"
                    ]
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HTTP —Å—Ç–∞—Ç—É—Å
                status_code = 200 if overall_status == "healthy" else (503 if overall_status == "unhealthy" else 207)
                return JSONResponse(content=response_data, status_code=status_code)
                
            except Exception as e:
                return JSONResponse(
                    status_code=503,
                    content={
                        "status": "unhealthy",
                        "error": str(e),
                        "timestamp": time.time(),
                        "message": "API health check failed"
                    }
                )
        
        @app.get("/api/routes")
        async def list_api_routes():
            """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
            routes_info = []
            
            for route in app.routes:
                if hasattr(route, 'methods') and hasattr(route, 'path'):
                    route_info = {
                        "path": route.path,
                        "methods": list(route.methods),
                        "name": getattr(route, 'name', 'unnamed'),
                        "tags": getattr(route, 'tags', [])
                    }
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ API –º–∞—Ä—à—Ä—É—Ç—ã
                    if route.path.startswith('/api/'):
                        routes_info.append(route_info)
            
            return {
                "total_api_routes": len(routes_info),
                "routes": sorted(routes_info, key=lambda x: x['path']),
                "initialization_status": initialization_status
            }
        
        # ====================================
        # –§–ò–ù–ê–õ–¨–ù–´–ô –°–¢–ê–¢–£–° –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
        # ====================================
        
        total_errors = len(initialization_status["errors"])
        
        if total_errors == 0:
            logger.info(f"‚úÖ All API routes configured successfully ({initialization_status['total_routes']} routes)")
        else:
            logger.warning(f"‚ö†Ô∏è API routes configured with {total_errors} errors")
            for error in initialization_status["errors"]:
                logger.warning(f"   - {error}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        @app.exception_handler(404)
        async def not_found_handler(request, exc):
            return JSONResponse(
                status_code=404,
                content={
                    "detail": f"Endpoint not found: {request.url.path}",
                    "available_endpoints": "/api",
                    "documentation": "/docs",
                    "suggestion": "Check /api for available endpoints"
                }
            )
        
        @app.exception_handler(500)
        async def internal_error_handler(request, exc):
            logger.error(f"Internal server error on {request.url.path}: {exc}")
            return JSONResponse(
                status_code=500,
                content={
                    "detail": "Internal server error",
                    "path": str(request.url.path),
                    "timestamp": time.time(),
                    "help": "Check server logs for details"
                }
            )
        
        logger.info("üéØ API configuration completed")
        
    except Exception as e:
        logger.error(f"‚ùå Critical error during API configuration: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π API –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
        @app.get("/api/error")
        async def api_error():
            return {
                "status": "‚ùå API configuration failed",
                "error": str(e),
                "message": "Critical API initialization error",
                "timestamp": time.time()
            }
        
        raise

def get_api_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        available_modules = {
            "user_chat": False,
            "user_search": False,
            "admin_documents": False,
            "admin_scraper": False,
            "admin_stats": False,
            "admin_llm": False
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º user –º–æ–¥—É–ª–∏
        try:
            from api.user.chat import router
            available_modules["user_chat"] = True
        except ImportError:
            pass
        
        try:
            from api.user.search import router
            available_modules["user_search"] = True
        except ImportError:
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º admin –º–æ–¥—É–ª–∏
        try:
            from api.admin.documents import router
            available_modules["admin_documents"] = True
        except ImportError:
            pass
        
        try:
            from api.admin.scraper import router
            available_modules["admin_scraper"] = True
        except ImportError:
            pass
        
        try:
            from api.admin.stats import router
            available_modules["admin_stats"] = True
        except ImportError:
            pass
        
        try:
            from api.admin.llm import router
            available_modules["admin_llm"] = True
        except ImportError:
            pass
        
        available_count = sum(available_modules.values())
        total_modules = len(available_modules)
        
        return {
            "status": "healthy" if available_count == total_modules else "partial",
            "summary": {
                "total_routes": available_count * 3,  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                "available_modules": available_count,
                "total_modules": total_modules,
                "completion_rate": f"{available_count}/{total_modules}"
            },
            "modules": available_modules,
            "missing_modules": [
                module for module, available in available_modules.items() 
                if not available
            ]
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e),
            "summary": {
                "total_routes": 0,
                "available_modules": 0
            }
        }

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
__all__ = [
    "configure_fastapi_app",
    "get_api_info"
]