#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ë–†–û–° - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–∞–±–æ—á–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
"""

import subprocess
import sys

def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –≥–æ—Ç–æ–≤–æ")
            return True
        else:
            print(f"‚ö†Ô∏è {description} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.stderr[:100]}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e}")
        return False

def clean_install():
    """–ß–∏—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
    print("üßπ –ü–û–õ–ù–ê–Ø –û–ß–ò–°–¢–ö–ê –ò –ü–ï–†–ï–£–°–¢–ê–ù–û–í–ö–ê")
    print("=" * 50)
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    cleanup_commands = [
        "pip uninstall fastapi uvicorn pydantic starlette pydantic-core pydantic-settings annotated-types typing-extensions -y",
        "pip cache purge"
    ]
    
    for cmd in cleanup_commands:
        run_command(cmd, "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
    
    print("\nüì¶ –£–°–¢–ê–ù–û–í–ö–ê –ü–†–û–í–ï–†–ï–ù–ù–´–• –í–ï–†–°–ò–ô")
    print("=" * 40)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
    install_commands = [
        # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        "pip install typing-extensions==4.7.1",
        
        # Pydantic v1 (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –¥–ª—è Python 3.13)
        "pip install pydantic==1.10.12",
        
        # Starlette —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å Pydantic v1
        "pip install starlette==0.27.0",
        
        # FastAPI —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å Pydantic v1
        "pip install fastapi==0.100.1",
        
        # Uvicorn
        "pip install uvicorn[standard]==0.22.0",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        "pip install python-multipart==0.0.6",
        "pip install python-dotenv==1.0.0"
    ]
    
    success_count = 0
    for cmd in install_commands:
        if run_command(cmd, f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {cmd.split()[-1]}"):
            success_count += 1
    
    print(f"\nüìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {success_count}/{len(install_commands)} –ø–∞–∫–µ—Ç–æ–≤")
    
    return success_count >= 5  # –ú–∏–Ω–∏–º—É–º –Ω—É–∂–Ω–æ 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤

def test_installation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò")
    print("=" * 30)
    
    tests = [
        ("typing_extensions", "Typing Extensions"),
        ("pydantic", "Pydantic"),
        ("starlette", "Starlette"), 
        ("fastapi", "FastAPI"),
        ("uvicorn", "Uvicorn")
    ]
    
    working = []
    broken = []
    
    for module, name in tests:
        try:
            imported = __import__(module)
            version = getattr(imported, "__version__", "unknown")
            working.append(f"{name} {version}")
            print(f"‚úÖ {name} {version}")
        except ImportError as e:
            broken.append(f"{name}: {e}")
            print(f"‚ùå {name}: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    return len(working) >= 4, working, broken

def create_simple_working_server():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ä–∞–±–æ—á–∏–π —Å–µ—Ä–≤–µ—Ä"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –°–ï–†–í–ï–†–ê")
    print("=" * 35)
    
    server_code = '''#!/usr/bin/env python3
"""
Legal Assistant API - –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13
"""

print("üöÄ –ó–∞–ø—É—Å–∫ Legal Assistant API...")

try:
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    import uvicorn
    import sys
    import time
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        title="Legal Assistant API",
        description="–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13",
        version="1.0.0-stable"
    )
    
    @app.get("/")
    def read_root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        return {
            "message": "üéâ Legal Assistant API –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            "status": "operational",
            "python_version": sys.version.split()[0],
            "framework": "FastAPI + Pydantic v1",
            "compatibility": "Python 3.13 stable",
            "timestamp": time.time()
        }
    
    @app.get("/health")
    def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            import pydantic
            import fastapi
            import uvicorn
            
            return {
                "status": "healthy",
                "components": {
                    "python": sys.version.split()[0],
                    "fastapi": fastapi.__version__,
                    "pydantic": pydantic.VERSION,
                    "uvicorn": uvicorn.__version__
                },
                "server": "running",
                "timestamp": time.time()
            }
        except Exception as e:
            return JSONResponse(
                status_code=503,
                content={"status": "unhealthy", "error": str(e)}
            )
    
    @app.get("/api/demo")
    def demo_endpoint():
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π API endpoint"""
        return {
            "message": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç",
            "features": [
                "‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω",
                "‚úÖ Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "‚úÖ JSON –æ—Ç–≤–µ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç",
                "‚úÖ –†–æ—É—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                "üöÄ –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"
            ],
            "next_steps": [
                "–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±-—Å–∫—Ä–∞–ø–∏–Ω–≥",
                "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"
            ]
        }
    
    if __name__ == "__main__":
        print("=" * 60)
        print("üèõÔ∏è  Legal Assistant API - –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        print("=" * 60)
        print("üêç Python:", sys.version.split()[0])
        print("üåê –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("üîç –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8000/health")
        print("üéØ –î–µ–º–æ API: http://localhost:8000/api/demo")
        print("‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: Ctrl+C")
        print("=" * 60)
        
        uvicorn.run(
            app,
            host="127.0.0.1",
            port=8000,
            log_level="info"
        )

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("üîß –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python emergency_reset.py")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    import traceback
    traceback.print_exc()
'''
    
    try:
        with open("stable_server.py", "w", encoding="utf-8") as f:
            f.write(server_code)
        print("‚úÖ –°–æ–∑–¥–∞–Ω stable_server.py")
        return True
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª: {e}")
        return False

def main():
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –°–ë–†–û–° –ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï")
    print("=" * 60)
    print("–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –ø—É—Ç–∞–Ω–∏—Ü—É! –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–∞–±–æ—á–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.")
    print()
    
    # –®–∞–≥ 1: –ß–∏—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    if clean_install():
        print("‚úÖ –ß–∏—Å—Ç–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        print("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏")
    
    # –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    success, working, broken = test_installation()
    
    if success:
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        print("–†–∞–±–æ—á–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for item in working:
            print(f"  ‚úÖ {item}")
        
        # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
        if create_simple_working_server():
            print("\nüéâ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python stable_server.py")
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:8000")
        
    else:
        print(f"\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        if broken:
            print("–ü—Ä–æ–±–ª–µ–º—ã:")
            for item in broken:
                print(f"  ‚ùå {item}")
        
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.11")

if __name__ == "__main__":
    main()