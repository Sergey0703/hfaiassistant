#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ID
"""
import json
import os

def debug_database():
    db_file = "simple_db/documents.json"
    
    if not os.path.exists(db_file):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        with open(db_file, 'r', encoding='utf-8') as f:
            documents = json.load(f)
        
        print(f"üìä –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
        print("=" * 60)
        
        for i, doc in enumerate(documents):
            print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç {i+1}:")
            print(f"   ID: {repr(doc['id'])} (—Ç–∏–ø: {type(doc['id'])})")
            print(f"   –ò–º—è —Ñ–∞–π–ª–∞: {doc['filename']}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {doc['category']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É metadata
            if 'metadata' in doc:
                print(f"   Metadata keys: {list(doc['metadata'].keys())}")
                if 'real_scraping' in doc['metadata']:
                    print(f"   –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥: {doc['metadata']['real_scraping']}")
            
            print(f"   –†–∞–∑–º–µ—Ä: {len(doc.get('content', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
            print("-" * 40)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        ids = [doc['id'] for doc in documents]
        print(f"\nüîç –í—Å–µ ID –≤ –±–∞–∑–µ:")
        for i, doc_id in enumerate(ids):
            print(f"   {i+1}. {repr(doc_id)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã ID
        unique_ids = set(ids)
        if len(unique_ids) != len(ids):
            print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è ID!")
            print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(unique_ids)}")
            print(f"   –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(ids)}")
        else:
            print(f"\n‚úÖ –í—Å–µ ID —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –±–∞–∑—ã: {e}")

def test_delete_simulation(test_id):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    db_file = "simple_db/documents.json"
    
    if not os.path.exists(db_file):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    try:
        with open(db_file, 'r', encoding='utf-8') as f:
            documents = json.load(f)
        
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ ID: {repr(test_id)}")
        
        # –ü–æ–∏—Å–∫ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found = False
        for doc in documents:
            if doc['id'] == test_id:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {doc['filename']}")
                found = True
                break
        
        if not found:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID {repr(test_id)} –ù–ï –ù–ê–ô–î–ï–ù")
            print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ ID:")
            for doc in documents[:3]:
                print(f"   {repr(doc['id'])}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Legal Assistant")
    print("=" * 60)
    
    debug_database()
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    print("\n" + "=" * 60)
    print("üß™ –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è:")
    print("–í–≤–µ–¥–∏—Ç–µ ID –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    
    try:
        test_id = input().strip()
        if test_id:
            test_delete_simulation(test_id)
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥...")