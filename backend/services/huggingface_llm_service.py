# backend/services/huggingface_llm_service.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ï–ô –ü–ê–ú–Ø–¢–ò
"""
LLM Service using HuggingFace Transformers with GPTQ quantization
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è Llama-2-7B-Chat-GPTQ –Ω–∞ HF Spaces
"""

import logging
import time
import os
import gc
from typing import List, Dict, Optional
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class LLMResponse:
    content: str
    model: str
    tokens_used: int
    response_time: float
    success: bool
    error: Optional[str] = None

class HuggingFaceLLMService:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM Service –¥–ª—è HF Spaces —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, model_name: str = "TheBloke/Llama-2-7B-Chat-GPTQ"):
        self.model_name = model_name
        self.model = None
        self.tokenizer = None
        self.service_type = "huggingface_gptq_memory_optimized"
        self.model_loaded = False
        self.loading_started = False
        self.loading_error = None
        self.hf_spaces = os.getenv("SPACE_ID") is not None
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è HF Spaces
        self.max_memory_gb = 12 if self.hf_spaces else 32  # –°–Ω–∏–∂–µ–Ω–æ —Å 14GB
        self.loading_timeout = 300 if self.hf_spaces else 180  # 5 –º–∏–Ω—É—Ç –¥–ª—è HF Spaces
        
        logger.info(f"ü§ñ Initializing MEMORY-OPTIMIZED GPTQ LLM service for: {model_name}")
        logger.info(f"üåç Platform: {'HuggingFace Spaces' if self.hf_spaces else 'Local'}")
        logger.info(f"üíæ Memory limit: {self.max_memory_gb}GB")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        self._start_model_loading()
    
    def _start_model_loading(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥–µ–ª–∏"""
        if self.loading_started:
            return
        
        self.loading_started = True
        
        try:
            logger.info(f"üîÑ Starting MEMORY-OPTIMIZED GPTQ model loading: {self.model_name}")
            self._load_model_with_memory_optimization()
        except Exception as e:
            self.loading_error = str(e)
            logger.error(f"‚ùå Model loading initiation failed: {e}")
    
    def _load_model_with_memory_optimization(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å —Å –ê–ì–†–ï–°–°–ò–í–ù–û–ô –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏ –¥–ª—è HF Spaces"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
            import torch
            from transformers import AutoTokenizer, AutoModelForCausalLM
            
            logger.info("üìö Dependencies available, starting MEMORY-OPTIMIZED model load...")
            
            # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
            if self.hf_spaces:
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                    torch.cuda.synchronize()
                gc.collect()
                logger.info("üßπ Aggressive memory cleanup for HF Spaces")
            
            # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ (–≤–∞—à–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–µ—Ä–≤–∞—è)
            model_candidates = [
                self.model_name,  # –í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
                "TheBloke/Mistral-7B-Instruct-v0.1-GPTQ",  # –ë–æ–ª–µ–µ –ª–µ–≥–∫–∞—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞
                "TheBloke/Llama-2-7B-Chat-GPTQ"  # Fallback
            ]
            
            for attempt, candidate_model in enumerate(model_candidates):
                try:
                    logger.info(f"üîÑ Attempt {attempt + 1}: Loading {candidate_model} with MEMORY OPTIMIZATION")
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                    self.tokenizer = AutoTokenizer.from_pretrained(
                        candidate_model,
                        trust_remote_code=True,
                        use_fast=True,
                        cache_dir="./.cache" if self.hf_spaces else None,
                        legacy=False  # –û—Ç–∫–ª—é—á–∞–µ–º legacy mode
                    )
                    
                    # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏
                    model_kwargs = {
                        "torch_dtype": torch.float16,  # –ò–°–ü–†–ê–í–õ–ï–ù–û: float16 –≤–º–µ—Å—Ç–æ float32
                        "trust_remote_code": True,
                        "low_cpu_mem_usage": True,
                        "cache_dir": "./.cache" if self.hf_spaces else None,
                        "device_map": "auto",
                        "max_memory": {"cpu": "10GB", 0: "3GB"} if torch.cuda.is_available() else {"cpu": "12GB"},  # –ñ–µ—Å—Ç–∫–∏–µ –ª–∏–º–∏—Ç—ã
                        "offload_folder": "./offload",  # CPU offloading
                        "offload_state_dict": True,  # Offload state dict
                    }
                    
                    logger.info(f"üîß Using aggressive memory settings: max_memory={model_kwargs['max_memory']}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å GPTQ
                    try:
                        logger.info(f"üîÑ Loading {candidate_model} with GPTQ + MEMORY OPTIMIZATION...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ auto-gptq
                        try:
                            import auto_gptq
                            logger.info("‚úÖ auto-gptq available")
                        except ImportError:
                            logger.warning("‚ö†Ô∏è auto-gptq not available, trying without")
                        
                        self.model = AutoModelForCausalLM.from_pretrained(
                            candidate_model,
                            **model_kwargs
                        )
                        
                        logger.info(f"‚úÖ Successfully loaded with GPTQ + MEMORY OPTIMIZATION: {candidate_model}")
                        
                    except Exception as gptq_error:
                        logger.warning(f"‚ö†Ô∏è GPTQ loading failed: {gptq_error}")
                        logger.info(f"üîÑ Trying {candidate_model} without GPTQ optimizations...")
                        
                        # Fallback –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö GPTQ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–æ —Å memory optimization
                        simplified_kwargs = {
                            "torch_dtype": torch.float16,
                            "device_map": "cpu" if self.hf_spaces and not torch.cuda.is_available() else "auto",
                            "low_cpu_mem_usage": True,
                            "max_memory": {"cpu": "10GB", 0: "3GB"} if torch.cuda.is_available() else {"cpu": "12GB"},
                            "offload_folder": "./offload"
                        }
                        
                        self.model = AutoModelForCausalLM.from_pretrained(
                            candidate_model,
                            **simplified_kwargs
                        )
                        
                        logger.info(f"‚úÖ Loaded without GPTQ but with MEMORY OPTIMIZATION: {candidate_model}")
                    
                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä–∞
                    if self.tokenizer.pad_token is None:
                        self.tokenizer.pad_token = self.tokenizer.eos_token
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º model_name –Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
                    self.model_name = candidate_model
                    self.model_loaded = True
                    
                    loading_time = time.time() - start_time
                    logger.info(f"üéâ MEMORY-OPTIMIZED GPTQ model ready: {candidate_model} (loaded in {loading_time:.1f}s)")
                    
                    # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                    if self.hf_spaces:
                        gc.collect()
                        if torch.cuda.is_available():
                            torch.cuda.empty_cache()
                            torch.cuda.synchronize()
                        logger.info("üßπ Post-loading memory cleanup completed")
                    
                    return  # –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                    
                except Exception as model_error:
                    logger.warning(f"‚ùå Failed to load {candidate_model}: {model_error}")
                    
                    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    if hasattr(self, 'model') and self.model is not None:
                        del self.model
                        self.model = None
                    if hasattr(self, 'tokenizer') and self.tokenizer is not None:
                        del self.tokenizer  
                        self.tokenizer = None
                    
                    gc.collect()
                    if torch.cuda.is_available():
                        torch.cuda.empty_cache()
                    
                    if attempt == len(model_candidates) - 1:
                        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        raise model_error
                    else:
                        logger.info(f"üîÑ Trying next model candidate...")
                        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            
        except ImportError as e:
            error_msg = f"Missing dependencies: {e}"
            self.loading_error = error_msg
            logger.error(f"‚ùå {error_msg}")
            logger.error("Install: pip install transformers torch auto-gptq accelerate")
            raise
            
        except Exception as e:
            self.loading_error = str(e)
            logger.error(f"‚ùå Model loading failed completely: {e}")
            raise
    
    async def answer_legal_question(self, question: str, context_documents: List[Dict], language: str = "en"):
        """–û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å —Å MEMORY-OPTIMIZED –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"""
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏
            if not self.model_loaded:
                if self.loading_error:
                    return LLMResponse(
                        content=self._generate_loading_error_response(question, language),
                        model=self.model_name,
                        tokens_used=0,
                        response_time=time.time() - start_time,
                        success=False,
                        error=f"Model loading failed: {self.loading_error}"
                    )
                else:
                    return LLMResponse(
                        content=self._generate_loading_response(question, language),
                        model=self.model_name,
                        tokens_used=0,
                        response_time=time.time() - start_time,
                        success=True,
                        error="Model still loading"
                    )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è HF Spaces
            prompt = self._build_optimized_prompt(question, context_documents, language)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å MEMORY OPTIMIZATION
            response_text = await self._generate_response_memory_optimized(prompt)
            
            response_time = time.time() - start_time
            
            return LLMResponse(
                content=response_text,
                model=self.model_name,
                tokens_used=len(response_text.split()),
                response_time=response_time,
                success=True
            )
            
        except Exception as e:
            logger.error(f"‚ùå Error generating response: {e}")
            return LLMResponse(
                content=self._generate_error_response(question, language, str(e)),
                model=self.model_name,
                tokens_used=0,
                response_time=time.time() - start_time,
                success=False,
                error=str(e)
            )
    
    def _build_optimized_prompt(self, question: str, context_documents: List[Dict], language: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è HF Spaces (–∫–æ—Ä–æ—á–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)"""
        
        # –°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤
        if language == "uk":
            system_prompt = "–í–∏ - —é—Ä–∏–¥–∏—á–Ω–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ —Ç–∞ –ø–æ —Å—É—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç—ñ–≤."
            context_intro = "–î–æ–∫—É–º–µ–Ω—Ç–∏:"
            answer_intro = f"–ü–∏—Ç–∞–Ω–Ω—è: {question}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å:"
        else:
            system_prompt = "You are a legal consultant. Answer concisely based on provided documents."
            context_intro = "Documents:"
            answer_intro = f"Question: {question}\nAnswer:"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HF Spaces
        max_docs = 2 if self.hf_spaces else 3
        max_doc_length = 600 if self.hf_spaces else 1000  # –ï—â–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        
        context_parts = []
        for i, doc in enumerate(context_documents[:max_docs]):
            filename = doc.get('filename', f'Doc {i+1}')
            content = doc.get('content', '')[:max_doc_length]
            context_parts.append(f"{filename}: {content}")
        
        context = f"\n{context_intro}\n" + "\n".join(context_parts) if context_parts else ""
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = f"{system_prompt}{context}\n\n{answer_intro}"
        
        # –ñ–µ—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è HF Spaces
        max_prompt_length = 1500 if self.hf_spaces else 2500  # –ï—â–µ –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        if len(prompt) > max_prompt_length:
            prompt = prompt[:max_prompt_length] + "..."
        
        return prompt
    
    async def _generate_response_memory_optimized(self, prompt: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ê–ì–†–ï–°–°–ò–í–ù–û–ô –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏ –¥–ª—è HF Spaces"""
        try:
            import torch
            
            # –ê–ì–†–ï–°–°–ò–í–ù–û —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è HF Spaces
            max_new_tokens = 100 if self.hf_spaces else 200  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 20
            max_input_length = 1200 if self.hf_spaces else 1800  # –°—Ç—Ä–æ–≥–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
            
            # –¢–æ–∫–µ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
            inputs = self.tokenizer.encode(
                prompt, 
                return_tensors="pt", 
                truncation=True, 
                max_length=max_input_length
            )
            
            # MEMORY-OPTIMIZED –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–ª—è HF Spaces
            generation_kwargs = {
                "max_new_tokens": max_new_tokens,
                "num_return_sequences": 1,
                "temperature": 0.1,  # –û—á–µ–Ω—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                "do_sample": True,
                "pad_token_id": self.tokenizer.eos_token_id,
                "eos_token_id": self.tokenizer.eos_token_id,
                "no_repeat_ngram_size": 2,
                "use_cache": False,  # –ö–†–ò–¢–ò–ß–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
                "return_dict_in_generate": False,  # –≠–∫–æ–Ω–æ–º–∏–º –ø–∞–º—è—Ç—å
            }
            
            logger.info(f"üîß Memory-optimized generation: max_tokens={max_new_tokens}, use_cache=False")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å AGGRESSIVE –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞–º—è—Ç–∏
            with torch.no_grad():
                if self.hf_spaces:
                    # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
                    if torch.cuda.is_available():
                        torch.cuda.empty_cache()
                        torch.cuda.synchronize()
                    gc.collect()
                
                outputs = self.model.generate(inputs, **generation_kwargs)
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            full_response = self.tokenizer.decode(outputs[0], skip_special_tokens=True)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—É—é —á–∞—Å—Ç—å
            response = full_response[len(prompt):].strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
            response = self._clean_response_optimized(response)
            
            # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if self.hf_spaces:
                del outputs, inputs
                gc.collect()
                if torch.cuda.is_available():
                    torch.cuda.empty_cache()
                    torch.cuda.synchronize()
            
            return response if response else "I need more specific information to provide a proper legal analysis."
            
        except torch.cuda.OutOfMemoryError:
            logger.error("‚ùå CUDA out of memory during generation")
            if torch.cuda.is_available():
                torch.cuda.empty_cache()
            return "Memory limit reached. Please try with a shorter question."
            
        except Exception as e:
            logger.error(f"‚ùå Generation error: {e}")
            return f"Technical error during response generation. Please try again."
    
    def _clean_response_optimized(self, response: str) -> str:
        """–ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è HF Spaces"""
        if not response:
            return response
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –æ–±—Ä–µ–∑–∞–µ–º
        lines = response.split('\n')
        cleaned_lines = []
        seen = set()
        
        for line in lines[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
            line = line.strip()
            if line and len(line) > 10 and line not in seen:
                cleaned_lines.append(line)
                seen.add(line)
        
        cleaned = '\n'.join(cleaned_lines)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–ª—è HF Spaces
        max_length = 1200 if self.hf_spaces else 1800
        if len(cleaned) > max_length:
            cleaned = cleaned[:max_length] + "..."
        
        return cleaned
    
    def _generate_loading_response(self, question: str, language: str) -> str:
        """–û—Ç–≤–µ—Ç –ø–æ–∫–∞ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"""
        if language == "uk":
            return f"""ü§ñ **MEMORY-OPTIMIZED GPTQ –º–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

‚è≥ –ú–æ–¥–µ–ª—å `{self.model_name}` —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø–∞–º'—è—Ç—ñ. –¶–µ –∑–∞–∑–≤–∏—á–∞–π –∑–∞–π–º–∞—î 1-2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞–ø—É—Å–∫—É.

üîÑ **–°—Ç–∞—Ç—É—Å:** –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GPTQ –∫–≤–∞–Ω—Ç–∏–∑–æ–≤–∞–Ω–æ—ó –º–æ–¥–µ–ª—ñ –∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø–∞–º'—è—Ç—ñ...
üéØ **–Ø–∫—ñ—Å—Ç—å:** –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å —é—Ä–∏–¥–∏—á–Ω–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
üåç **–ú–æ–≤–∏:** –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ —Ç–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞
‚ö° **–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è:** GPTQ 4-bit –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü—ñ—è + –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–∞–º'—è—Ç—Ç—é

üí° **–ü–æ—Ä–∞–¥–∞:** –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ —Ö–≤–∏–ª–∏–Ω—É –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó AI –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ."""
        else:
            return f"""ü§ñ **MEMORY-OPTIMIZED GPTQ Model Loading...**

**Your Question:** {question}

‚è≥ Model `{self.model_name}` is initializing with memory optimization. This typically takes 1-2 minutes for first startup.

üîÑ **Status:** Loading GPTQ quantized model with aggressive memory optimization...
üéØ **Quality:** High-quality legal consultations when complete
üåç **Languages:** English and Ukrainian  
‚ö° **Optimization:** GPTQ 4-bit quantization + aggressive memory management

üí° **Tip:** Try again in a minute for full AI response."""
    
    def _generate_loading_error_response(self, question: str, language: str) -> str:
        """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        if language == "uk":
            return f"""‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è MEMORY-OPTIMIZED GPTQ –º–æ–¥–µ–ª—ñ**

**–í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:** {question}

üö´ **–ü—Ä–æ–±–ª–µ–º–∞:** –ú–æ–¥–µ–ª—å `{self.model_name}` –Ω–µ –∑–º–æ–≥–ª–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏—Å—è –Ω–∞–≤—ñ—Ç—å –∑ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é –ø–∞–º'—è—Ç—ñ.
üìã **–ü–æ–º–∏–ª–∫–∞:** {self.loading_error}

üîß **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞–º'—è—Ç—ñ –Ω–∞–≤—ñ—Ç—å –∑ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—é –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—î—é
‚Ä¢ –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ (auto-gptq, transformers)
‚Ä¢ –¢–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ HuggingFace Hub

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
‚Ä¢ –ú–æ–¥–µ–ª—å –º–æ–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏—Å—è —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å HuggingFace —Å–µ—Ä–≤—ñ—Å—ñ–≤"""
        else:
            return f"""‚ùå **MEMORY-OPTIMIZED GPTQ Model Loading Error**

**Your Question:** {question}

üö´ **Issue:** Model `{self.model_name}` failed to load even with memory optimization.
üìã **Error:** {self.loading_error}

üîß **Possible Causes:**
‚Ä¢ Insufficient memory even with aggressive optimization
‚Ä¢ Missing dependencies (auto-gptq, transformers)
‚Ä¢ Temporary HuggingFace Hub issues

üí° **Recommendations:**
‚Ä¢ Try again in a few minutes
‚Ä¢ Model may be loading in background
‚Ä¢ Check HuggingFace services availability"""
    
    def _generate_error_response(self, question: str, language: str, error: str) -> str:
        """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if language == "uk":
            return f"""‚ö†Ô∏è **–¢–∏–º—á–∞—Å–æ–≤–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞**

–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: "{question}"

üîß –î–µ—Ç–∞–ª—ñ: {error}

–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É."""
        else:
            return f"""‚ö†Ô∏è **Temporary Technical Issue**

Error processing query: "{question}"

üîß Details: {error}

Please try rephrasing your question or try again."""
    
    async def get_service_status(self):
        """–î–µ—Ç–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        status = {
            "service_type": "huggingface_gptq_memory_optimized",
            "model_name": self.model_name,
            "model_loaded": self.model_loaded,
            "loading_started": self.loading_started,
            "loading_error": self.loading_error,
            "platform": "HuggingFace Spaces" if self.hf_spaces else "Local",
            "supported_languages": ["en", "uk"],
            "optimizations": {
                "gptq_quantization": True,
                "memory_optimized": True,
                "aggressive_memory_management": True,
                "hf_spaces_mode": self.hf_spaces,
                "max_memory_gb": self.max_memory_gb,
                "loading_timeout": self.loading_timeout,
                "use_cache_disabled": True,
                "cpu_offloading": True
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        try:
            import torch
            status["torch_available"] = True
            status["cuda_available"] = torch.cuda.is_available()
            if torch.cuda.is_available():
                status["cuda_device_count"] = torch.cuda.device_count()
                status["cuda_memory_allocated"] = torch.cuda.memory_allocated()
                status["cuda_memory_cached"] = torch.cuda.memory_reserved()
        except ImportError:
            status["torch_available"] = False
        
        try:
            import transformers
            status["transformers_version"] = transformers.__version__
        except ImportError:
            status["transformers_available"] = False
        
        try:
            import auto_gptq
            status["auto_gptq_available"] = True
        except ImportError:
            status["auto_gptq_available"] = False
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        recommendations = []
        if not self.model_loaded:
            if self.loading_error:
                recommendations.extend([
                    "Memory optimization attempted but failed",
                    "Check available memory and dependencies",
                    "Consider using a smaller model",
                    "Try restarting with fewer background processes"
                ])
            else:
                recommendations.extend([
                    "Model loading with memory optimization in progress",
                    "First load may take 1-2 minutes",
                    "Aggressive memory management active",
                    "Check /startup-progress for loading status"
                ])
        else:
            recommendations.extend([
                "Model ready with memory optimization",
                "GPTQ quantization active",
                "Aggressive memory management enabled",
                "Optimized for HuggingFace Spaces constraints"
            ])
        
        status["recommendations"] = recommendations
        
        return status

def create_llm_service(model_name: str = "TheBloke/Llama-2-7B-Chat-GPTQ"):
    """–°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π LLM —Å–µ—Ä–≤–∏—Å"""
    try:
        return HuggingFaceLLMService(model_name)
    except Exception as e:
        logger.error(f"Failed to create HuggingFace LLM service: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback
        from app.dependencies import HFSpacesImprovedLLMFallback
        return HFSpacesImprovedLLMFallback()