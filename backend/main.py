# backend/main.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø POST ENDPOINTS
"""
Legal Assistant API - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –° POST 404
–ö–õ–Æ–ß–ï–í–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π middleware (—É–±–∏—Ä–∞–µ–º BaseHTTPMiddleware)
2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ CORS middleware
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import uvicorn
import sys
import os
from pathlib import Path
from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import time
import logging
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = Path(__file__).parent
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

def create_app_fixed() -> FastAPI:
    """
    –°–æ–∑–¥–∞–µ—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è POST endpoints
    """
    try:
        logger.info("üöÄ Creating FastAPI application with POST fixes...")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ë–ï–ó lifespan —Å–Ω–∞—á–∞–ª–∞
        app = FastAPI(
            title="Legal Assistant API",
            version="2.0.0",
            description="AI Legal Assistant with GPTQ model support",
            docs_url="/docs",
            redoc_url="/redoc",
            openapi_url="/openapi.json"
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –°–ù–ê–ß–ê–õ–ê –¥–æ–±–∞–≤–ª—è–µ–º CORS middleware
        app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è HF Spaces
            allow_credentials=True,
            allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD"],  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥—ã
            allow_headers=["*"],
            expose_headers=["*"],
            max_age=3600
        )
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ü—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π middleware –≤–º–µ—Å—Ç–æ BaseHTTPMiddleware
        @app.middleware("http")
        async def simple_logging_middleware(request: Request, call_next):
            """–ü—Ä–æ—Å—Ç–æ–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
            request_id = str(uuid.uuid4())[:8]
            start_time = time.time()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
            method = request.method
            path = request.url.path
            client_ip = request.client.host if request.client else "unknown"
            
            logger.info(f"üåê [{request_id}] {method} {path} - IP: {client_ip}")
            
            try:
                # –í–ê–ñ–ù–û: –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ
                response = await call_next(request)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                process_time = time.time() - start_time
                status_emoji = "‚úÖ" if response.status_code < 400 else "‚ùå"
                logger.info(f"{status_emoji} [{request_id}] {method} {path} - Status: {response.status_code} - Time: {process_time:.3f}s")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                response.headers["X-Request-ID"] = request_id
                response.headers["X-Process-Time"] = str(round(process_time, 3))
                
                return response
                
            except Exception as e:
                process_time = time.time() - start_time
                logger.error(f"‚ùå [{request_id}] {method} {path} - Error: {str(e)} - Time: {process_time:.3f}s")
                raise
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –î–û –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è API
        @app.get("/")
        async def root():
            return {
                "message": "Legal Assistant API with GPTQ Model",
                "version": "2.0.0",
                "status": "healthy",
                "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
                "docs": "/docs",
                "health": "/health"
            }
        
        @app.get("/health")
        async def health_check():
            return {
                "status": "healthy",
                "timestamp": time.time(),
                "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local"
            }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ü–æ–¥–∫–ª—é—á–∞–µ–º API —Ä–æ—É—Ç–µ—Ä—ã –ü–û–°–õ–ï middleware
        try:
            logger.info("üì° Configuring API routes...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º API —Ä–æ—É—Ç–µ—Ä—ã
            from api.user.chat import router as chat_router
            from api.user.search import router as search_router
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            app.include_router(
                chat_router,
                prefix="/api/user",
                tags=["User Chat"]
            )
            
            app.include_router(
                search_router,
                prefix="/api/user", 
                tags=["User Search"]
            )
            
            logger.info("‚úÖ User API routes configured successfully")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            try:
                from api.admin.documents import router as admin_docs_router
                from api.admin.stats import router as admin_stats_router
                
                app.include_router(
                    admin_docs_router,
                    prefix="/api/admin",
                    tags=["Admin Documents"]
                )
                
                app.include_router(
                    admin_stats_router,
                    prefix="/api/admin",
                    tags=["Admin Stats"]
                )
                
                logger.info("‚úÖ Admin API routes configured successfully")
                
            except ImportError as e:
                logger.warning(f"‚ö†Ô∏è Admin routes not available: {e}")
            
        except Exception as e:
            logger.error(f"‚ùå Error configuring API routes: {e}")
            
            # –°–æ–∑–¥–∞–µ–º fallback API endpoint
            @app.get("/api/status")
            async def api_status():
                return {
                    "status": "‚ùå API routes configuration failed",
                    "error": str(e),
                    "available_endpoints": [
                        "GET / - Root endpoint",
                        "GET /health - Health check",
                        "GET /docs - API documentation"
                    ]
                }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –¢–µ—Å—Ç–æ–≤—ã–π POST endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        @app.post("/test-post")
        async def test_post(data: dict = None):
            """–¢–µ—Å—Ç–æ–≤—ã–π POST endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ POST —Ä–∞–±–æ—Ç–∞–µ—Ç"""
            return {
                "message": "POST endpoint works!",
                "received_data": data,
                "timestamp": time.time(),
                "method": "POST"
            }
        
        @app.options("/test-post")
        async def test_post_options():
            """OPTIONS –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ POST endpoint"""
            return Response(status_code=200, headers={
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "POST, OPTIONS",
                "Access-Control-Allow-Headers": "*"
            })
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ endpoints –¥–ª—è HF Spaces
        @app.get("/hf-spaces-health")
        async def hf_spaces_health():
            try:
                from app.dependencies import get_services_status
                services = get_services_status()
                
                return {
                    "status": "healthy",
                    "platform": "HuggingFace Spaces",
                    "api_version": "2.0.0",
                    "services": services,
                    "endpoints": {
                        "chat": "/api/user/chat",
                        "search": "/api/user/search",
                        "test_post": "/test-post"
                    },
                    "post_fix_applied": True
                }
            except Exception as e:
                return {
                    "status": "error", 
                    "error": str(e),
                    "platform": "HuggingFace Spaces"
                }
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
        @app.exception_handler(404)
        async def not_found_handler(request: Request, exc):
            return JSONResponse(
                status_code=404,
                content={
                    "detail": f"Endpoint not found: {request.method} {request.url.path}",
                    "available_endpoints": {
                        "root": "GET /",
                        "health": "GET /health",
                        "docs": "GET /docs",
                        "test_post": "POST /test-post",
                        "api_chat": "POST /api/user/chat",
                        "api_search": "POST /api/user/search"
                    },
                    "method": request.method,
                    "path": request.url.path,
                    "suggestion": "Check /docs for available endpoints"
                }
            )
        
        logger.info("‚úÖ FastAPI application created with POST fixes")
        return app
        
    except Exception as e:
        logger.error(f"‚ùå Critical error creating application: {e}")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ fallback –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        fallback_app = FastAPI(title="Legal Assistant API - Emergency Mode")
        
        fallback_app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_methods=["*"],
            allow_headers=["*"]
        )
        
        @fallback_app.get("/")
        async def emergency_root():
            return {
                "status": "emergency_mode",
                "error": str(e),
                "message": "Application failed to initialize properly"
            }
        
        @fallback_app.post("/test-post") 
        async def emergency_test():
            return {"message": "Emergency POST works", "error": str(e)}
        
        return fallback_app

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 9: –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è deployment
try:
    logger.info("üöÄ Initializing Legal Assistant API for HuggingFace Spaces...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º HF Spaces
    is_hf_spaces = os.getenv("SPACE_ID") is not None
    if is_hf_spaces:
        logger.info("üåç HuggingFace Spaces detected - applying optimizations")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è HF Spaces
        os.environ.setdefault("LLM_DEMO_MODE", "false")
        os.environ.setdefault("USE_CHROMADB", "true") 
        os.environ.setdefault("LOG_LEVEL", "INFO")
    
    # –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = create_app_fixed()
    
    logger.info("‚úÖ Legal Assistant API ready for deployment")
    logger.info(f"üåç Platform: {'HuggingFace Spaces' if is_hf_spaces else 'Local'}")
    logger.info("üîß POST endpoint fixes applied")
    
except Exception as e:
    logger.error(f"‚ùå Deployment initialization failed: {e}")
    
    # –ü—Ä–æ—Å—Ç–µ–π—à–∏–π fallback
    app = FastAPI(title="Legal Assistant API - Recovery Mode")
    
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_methods=["*"], 
        allow_headers=["*"]
    )
    
    @app.get("/")
    async def recovery_root():
        return {
            "status": "recovery_mode",
            "error": str(e),
            "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local"
        }
    
    @app.post("/test-post")
    async def recovery_test():
        return {"message": "Recovery POST works", "timestamp": time.time()}

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        host = "0.0.0.0"
        port = 7860 if os.getenv("SPACE_ID") else 8000
        
        logger.info(f"üåê Starting server on {host}:{port}")
        logger.info("üîß POST endpoint fixes enabled")
        
        uvicorn.run(
            "main:app",
            host=host,
            port=port,
            log_level="info",
            reload=False,
            workers=1,
            timeout_keep_alive=65
        )
        
    except Exception as e:
        logger.error(f"‚ùå Server startup failed: {e}")
        raise

if __name__ == "__main__":
    main()
else:
    logger.info("üì¶ Legal Assistant API module imported with POST fixes")
    logger.info("üîó Test endpoint: POST /test-post")
    logger.info("üè• Health Check: /hf-spaces-health")