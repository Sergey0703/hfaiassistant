# backend/main.py - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø HUGGINGFACE SPACES + REACT SPA
"""
Legal Assistant API - Main Application Entry Point
–ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫: FastAPI Backend + React Frontend + GPTQ Model + ChromaDB
"""

import uvicorn
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = Path(__file__).parent
if str(current_dir) not in sys.path:
    sys.path.insert(0, str(current_dir))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from utils.logger import setup_logging
    setup_logging(log_level="INFO", log_file="logs/legal_assistant.log")
except ImportError:
    import logging
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )

import logging

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from utils.startup_banner import (
    print_startup_banner, check_hf_spaces_environment, 
    check_critical_dependencies, create_necessary_directories
)
from config.timeouts import (
    GLOBAL_REQUEST_TIMEOUT, KEEP_ALIVE_TIMEOUT, GRACEFUL_TIMEOUT,
    GPTQ_MODEL_LOADING_TIMEOUT, GPTQ_FIRST_LOAD_TIMEOUT
)
from core.app_factory import create_app_for_deployment

logger = logging.getLogger(__name__)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ HF Spaces)"""
    try:
        print_startup_banner()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        is_hf_spaces = check_hf_spaces_environment()
        print()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        create_necessary_directories()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not check_critical_dependencies():
            print("\n‚ùå Cannot start due to missing critical dependencies")
            sys.exit(1)
        
        print()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app_for_deployment()
        
        if app is None:
            print("‚ùå Failed to create FastAPI application")
            sys.exit(1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        host = "0.0.0.0"
        port = 7860 if is_hf_spaces else 8000
        
        print(f"üåê Server Configuration:")
        print(f"   ‚Ä¢ Host: {host}")
        print(f"   ‚Ä¢ Port: {port}")
        print(f"   ‚Ä¢ Environment: {'HuggingFace Spaces' if is_hf_spaces else 'Local'}")
        print(f"   ‚Ä¢ Model: TheBloke/Llama-2-7B-Chat-GPTQ")
        print(f"   ‚Ä¢ React SPA: Enabled")
        print(f"   ‚Ä¢ Lazy Loading: Enabled")
        print(f"   ‚Ä¢ CORS Fix: Applied")
        print(f"   ‚Ä¢ Comprehensive Timeouts: Enabled")
        
        print(f"\nüîó Available Endpoints:")
        print(f"   ‚Ä¢ React App: http://localhost:{port}/")
        print(f"   ‚Ä¢ API Docs: http://localhost:{port}/docs")
        print(f"   ‚Ä¢ Health Check: http://localhost:{port}/health")
        print(f"   ‚Ä¢ HF Health: http://localhost:{port}/hf-spaces-health")
        print(f"   ‚Ä¢ Model Status: http://localhost:{port}/model-status")
        print(f"   ‚Ä¢ Memory Status: http://localhost:{port}/memory-status")
        print(f"   ‚Ä¢ Startup Progress: http://localhost:{port}/startup-progress")
        print(f"   ‚Ä¢ Timeout Status: http://localhost:{port}/timeout-status")
        
        print(f"\n‚è∞ Timeout Configuration:")
        print(f"   ‚Ä¢ Global Request: {GLOBAL_REQUEST_TIMEOUT}s (10 min)")
        print(f"   ‚Ä¢ GPTQ Loading: {GPTQ_MODEL_LOADING_TIMEOUT}s (8 min)")
        print(f"   ‚Ä¢ GPTQ First Load: {GPTQ_FIRST_LOAD_TIMEOUT}s (10 min)")
        print(f"   ‚Ä¢ Keep-Alive: {KEEP_ALIVE_TIMEOUT}s")
        
        print(f"\nüéØ Starting server with comprehensive timeout protection and React SPA...")
        print("=" * 70)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        uvicorn.run(
            "main:app",
            host=host,
            port=port,
            log_level="info",
            reload=False,  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ production
            access_log=True,
            server_header=False,
            date_header=False,
            workers=1,  # –í–∞–∂–Ω–æ: —Ç–æ–ª—å–∫–æ 1 worker –¥–ª—è HF Spaces –∏ GPTQ
            timeout_keep_alive=KEEP_ALIVE_TIMEOUT,
            timeout_graceful_shutdown=GRACEFUL_TIMEOUT,
            limit_concurrency=5,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è GPTQ –º–æ–¥–µ–ª–∏
            limit_max_requests=500,  # –õ–∏–º–∏—Ç –¥–ª—è memory management
            timeout_notify=GRACEFUL_TIMEOUT,
        )
        
    except KeyboardInterrupt:
        print("\n\nüëã Legal Assistant API shutting down...")
        print("Thank you for using Legal Assistant!")
        
    except Exception as e:
        logger.error(f"Application startup failed: {e}", exc_info=True)
        print(f"\n‚ùå Fatal error: {e}")
        sys.exit(1)

# ====================================
# –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –î–õ–Ø DEPLOYMENT
# ====================================

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è WSGI/ASGI —Å–µ—Ä–≤–µ—Ä–æ–≤
try:
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è deployment
    print("üöÄ Initializing Legal Assistant API for HuggingFace Spaces...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HF Spaces
    is_hf_spaces = check_hf_spaces_environment()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–º–æ–∂–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ –Ω–µ —É–¥–∞—Å—Ç—Å—è –≤ HF Spaces - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)
    create_necessary_directories()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    app = create_app_for_deployment()
    
    if app is None:
        raise RuntimeError("Failed to create FastAPI application")
    
    print("‚úÖ Legal Assistant API ready for deployment")
    print(f"üåç Platform: {'HuggingFace Spaces' if is_hf_spaces else 'Local'}")
    print("ü§ñ GPTQ Model: TheBloke/Llama-2-7B-Chat-GPTQ")
    print("‚öõÔ∏è React Frontend: Integrated")
    print("üîÑ Initialization: Lazy loading enabled")
    print(f"‚è∞ Request Timeout: {GLOBAL_REQUEST_TIMEOUT}s")
    print(f"üîÑ Keep-Alive: {KEEP_ALIVE_TIMEOUT}s")
    print(f"ü§ñ GPTQ Loading: {GPTQ_MODEL_LOADING_TIMEOUT}s")
    print("üîß CORS Fix: Applied (POST endpoints working)")
    print("üõ°Ô∏è Comprehensive Timeout Protection: Active")
    print("üì± Single Page Application: React SPA Ready")
    
except Exception as e:
    print(f"‚ùå Deployment initialization failed: {e}")
    print("üîÑ Creating minimal fallback application...")
    
    # –£–ª—É—á—à–µ–Ω–Ω–æ–µ fallback –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    from fastapi import FastAPI
    from fastapi.middleware.cors import CORSMiddleware
    
    app = FastAPI(
        title="Legal Assistant API - Recovery Mode", 
        version="2.0.0",
        description="Minimal recovery mode - some services may be unavailable"
    )
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: CORS –¥–∞–∂–µ –≤ fallback
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_methods=["*"],
        allow_headers=["*"]
    )
    
    @app.get("/")
    async def recovery_info():
        return {
            "status": "recovery_mode",
            "error": str(e),
            "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
            "timestamp": __import__("time").time(),
            "message": "Application is running in recovery mode",
            "cors_fix_applied": True,
            "react_spa": "Recovery mode - limited functionality",
            "timeout_controls": {
                "global_timeout": GLOBAL_REQUEST_TIMEOUT,
                "keep_alive": KEEP_ALIVE_TIMEOUT,
                "gptq_loading": GPTQ_MODEL_LOADING_TIMEOUT
            },
            "available_endpoints": [
                "/health - Basic health check",
                "/recovery-diagnostics - Detailed error info", 
                "/docs - API documentation (limited)"
            ],
            "recommendations": [
                "Check server logs for detailed errors",
                "Verify all dependencies are installed",
                f"GPTQ model loading can take up to {GPTQ_FIRST_LOAD_TIMEOUT//60} minutes",
                "Try refreshing the page in a few minutes",
                "Some services may still be initializing",
                "React frontend may need to be built: npm run build"
            ]
        }

# –ë—ã—Å—Ç—Ä—ã–π health check –¥–ª—è deployment
@app.get("/health")
async def health_check():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        import asyncio
        return await asyncio.wait_for({
            "status": "healthy", 
            "version": "2.0.0",
            "platform": "HuggingFace Spaces" if os.getenv("SPACE_ID") else "Local",
            "gptq_model": "TheBloke/Llama-2-7B-Chat-GPTQ",
            "react_spa": "Enabled",
            "lazy_loading": True,
            "memory_optimized": True,
            "cors_fix_applied": True,
            "post_endpoints_working": True,
            "timeout_protected": True,
            "timeout_limits": {
                "global": f"{GLOBAL_REQUEST_TIMEOUT}s",
                "gptq_loading": f"{GPTQ_MODEL_LOADING_TIMEOUT}s",
                "health_check": "15s"
            },
            "timestamp": __import__("time").time()
        }, timeout=15)
    except:
        return {
            "status": "timeout",
            "timeout_limit": "15s",
            "global_timeout": f"{GLOBAL_REQUEST_TIMEOUT}s",
            "message": "Health check timeout - services may be loading"
        }

if __name__ == "__main__":
    main()
else:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è
    logger.info("üì¶ Legal Assistant API module imported")
    logger.info("ü§ñ GPTQ Model: TheBloke/Llama-2-7B-Chat-GPTQ")
    logger.info("‚öõÔ∏è React SPA: Integrated fullstack application")
    logger.info("üöÄ Ready for HuggingFace Spaces deployment")
    logger.info("üíæ Memory optimized for 16GB limit")
    logger.info("üîÑ Lazy loading enabled for faster startup")
    logger.info("üîß CORS fix applied - POST endpoints working")
    logger.info(f"‚è∞ Comprehensive timeout protection - {GLOBAL_REQUEST_TIMEOUT}s global limit")
    logger.info(f"ü§ñ GPTQ loading timeout: {GPTQ_MODEL_LOADING_TIMEOUT}s")
    print("üîó React App: /")
    print("üîó API Documentation: /docs")
    print("üè• Health Check: /hf-spaces-health")
    print("üìä Timeout Status: /timeout-status")
    print("ü§ñ Model Status: /model-status")
    print("üíæ Memory Status: /memory-status")
    print("‚úÖ POST endpoints fixed and working")
    print("‚öõÔ∏è React SPA integrated and ready")
    print(f"üõ°Ô∏è All requests protected by comprehensive timeout system")
    print(f"‚è∞ GPTQ model loading: up to {GPTQ_FIRST_LOAD_TIMEOUT//60} minutes first time")