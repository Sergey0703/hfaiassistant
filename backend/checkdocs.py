#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ChromaDB
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    import chromadb
    print("‚úÖ ChromaDB –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ChromaDB
    client = chromadb.PersistentClient(path="./chromadb_data")
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB —É—Å–ø–µ—à–Ω–æ")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    try:
        collection = client.get_collection("legal_documents")
        print("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è 'legal_documents' –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        all_docs = collection.get(include=["metadatas", "documents"])
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê CHROMADB:")
        print(f"–í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(all_docs['ids'])}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        main_docs = []
        chunks = []
        
        for i, metadata in enumerate(all_docs["metadatas"]):
            if metadata.get("is_chunk", True):
                chunks.append({
                    "id": all_docs["ids"][i],
                    "filename": metadata.get("filename", "Unknown"),
                    "parent_id": metadata.get("parent_document_id", "None")
                })
            else:
                main_docs.append({
                    "id": all_docs["ids"][i], 
                    "filename": metadata.get("filename", "Unknown"),
                    "category": metadata.get("category", "Unknown")
                })
        
        print(f"–û—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(main_docs)}")
        print(f"–ß–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        print(f"\nüìÑ –û–°–ù–û–í–ù–´–ï –î–û–ö–£–ú–ï–ù–¢–´:")
        for i, doc in enumerate(main_docs, 1):
            print(f"{i}. {doc['filename']} (ID: {doc['id'][:20]}...)")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {doc['category']}")
        
        print(f"\nüß© –ß–ê–ù–ö–ò:")
        chunk_groups = {}
        for chunk in chunks:
            parent = chunk["parent_id"]
            if parent not in chunk_groups:
                chunk_groups[parent] = []
            chunk_groups[parent].append(chunk)
        
        for parent_id, chunk_list in chunk_groups.items():
            if parent_id != "None":
                print(f"–î–æ–∫—É–º–µ–Ω—Ç {parent_id}: {len(chunk_list)} —á–∞–Ω–∫–æ–≤")
            else:
                print(f"Orphaned chunks: {len(chunk_list)}")
                for chunk in chunk_list:
                    print(f"  - {chunk['filename']} (ID: {chunk['id'][:20]}...)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
        
        # –ï—Å—Ç—å –ª–∏ —á–∞–Ω–∫–∏ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞?
        orphaned_chunks = [c for c in chunks if c["parent_id"] == "None"]
        if orphaned_chunks:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(orphaned_chunks)} —á–∞–Ω–∫–æ–≤ –±–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        # –ï—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –±–µ–∑ —á–∞–Ω–∫–æ–≤?
        main_without_chunks = []
        for doc in main_docs:
            has_chunks = any(c["parent_id"] == doc["id"] for c in chunks)
            if not has_chunks:
                main_without_chunks.append(doc)
        
        if main_without_chunks:
            print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(main_without_chunks)} –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —á–∞–Ω–∫–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        print(f"\nüìù –ü–†–ò–ú–ï–†–´ –ö–û–ù–¢–ï–ù–¢–ê:")
        for i, doc in enumerate(main_docs[:2], 1):
            doc_index = all_docs["ids"].index(doc["id"])
            content = all_docs["documents"][doc_index]
            print(f"{i}. {doc['filename']}:")
            print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:100]}...")
            print(f"   –î–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        try:
            collections = client.list_collections()
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {[c.name for c in collections]}")
        except Exception as e2:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {e2}")

except ImportError:
    print("‚ùå ChromaDB –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install chromadb")
except Exception as e:
    print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

print(f"\nüìÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
if os.path.exists("chromadb_data"):
    print("‚úÖ –ü–∞–ø–∫–∞ chromadb_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    files = os.listdir("chromadb_data")
    print(f"   –§–∞–π–ª—ã: {files}")
else:
    print("‚ùå –ü–∞–ø–∫–∞ chromadb_data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

if os.path.exists("simple_db"):
    print("‚úÖ –ü–∞–ø–∫–∞ simple_db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    if os.path.exists("simple_db/documents.json"):
        print("‚úÖ –§–∞–π–ª simple_db/documents.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        with open("simple_db/documents.json", "r", encoding="utf-8") as f:
            import json
            data = json.load(f)
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ simple_db: {len(data)}")
    else:
        print("‚ùå –§–∞–π–ª simple_db/documents.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
else:
    print("‚ùå –ü–∞–ø–∫–∞ simple_db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")