#!/usr/bin/env python3
"""
–û–±–µ—Ä—Ç–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è Python 3.13
"""

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ForwardRef –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
import sys
from typing import ForwardRef

# –ü—Ä–æ–ø–∞—Ç—á–∏–≤–∞–µ–º ForwardRef._evaluate –¥–ª—è Python 3.13
original_evaluate = ForwardRef._evaluate

def patched_evaluate(self, globalns=None, localns=None, recursive_guard=None):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è _evaluate"""
    if recursive_guard is None:
        recursive_guard = frozenset()
    return original_evaluate(self, globalns, localns, recursive_guard)

ForwardRef._evaluate = patched_evaluate

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å FastAPI
try:
    from fastapi import FastAPI
    from fastapi.responses import JSONResponse
    import uvicorn
    import time
    
    print("‚úÖ –ü–∞—Ç—á –ø—Ä–∏–º–µ–Ω–µ–Ω, FastAPI –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = FastAPI(
        title="Legal Assistant API - Python 3.13 Compatible",
        description="–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Python 3.13",
        version="1.0.0-py313-fix"
    )
    
    @app.get("/")
    async def root():
        return {
            "message": "üéâ Legal Assistant API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Python 3.13!",
            "status": "working",
            "python_version": sys.version,
            "fix_applied": "ForwardRef._evaluate patched",
            "timestamp": time.time()
        }
    
    @app.get("/health")
    async def health():
        import pydantic
        import fastapi
        
        return {
            "status": "healthy",
            "python_version": sys.version.split()[0],
            "packages": {
                "fastapi": fastapi.__version__,
                "pydantic": str(pydantic.VERSION),
                "uvicorn": uvicorn.__version__
            },
            "fix_status": "ForwardRef compatibility patch active"
        }
    
    @app.get("/api/test")
    async def api_test():
        return {
            "message": "API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ",
            "features": [
                "‚úÖ Python 3.13 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å",
                "‚úÖ ForwardRef._evaluate –∏—Å–ø—Ä–∞–≤–ª–µ–Ω",
                "‚úÖ FastAPI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç",
                "‚úÖ Pydantic —Ä–∞–±–æ—Ç–∞–µ—Ç",
                "‚úÖ JSON responses –∞–∫—Ç–∏–≤–Ω—ã"
            ]
        }
    
    if __name__ == "__main__":
        print("=" * 60)
        print("üêç Legal Assistant API - Python 3.13 Compatible")
        print("=" * 60)
        print("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω –ø–∞—Ç—á –¥–ª—è ForwardRef._evaluate()")
        print("üåê –°–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
        print("‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8000/health")
        print("=" * 60)
        
        uvicorn.run(
            app,
            host="127.0.0.1", 
            port=8000,
            log_level="info"
        )

except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–∂–µ –ø–æ—Å–ª–µ –ø–∞—Ç—á–∞: {e}")
    print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install --force-reinstall fastapi pydantic uvicorn")
except Exception as e:
    print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
