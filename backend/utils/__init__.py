# ====================================
# –§–ê–ô–õ: backend/utils/__init__.py (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –ó–∞–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é
# ====================================

"""
Utils Package - –ü–∞–∫–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ —É—Ç–∏–ª–∏—Ç
"""

import logging

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π logger –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
_logger = logging.getLogger(__name__)

# –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ utils
__version__ = "2.0.0"

# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞
__author__ = "Legal Assistant Team"
__description__ = "Utility functions and helpers for Legal Assistant API"

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ helpers
try:
    from .helpers import (
        # –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
        validate_file_type,
        get_file_mime_type,
        format_file_size,
        clean_filename,
        generate_unique_filename,
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        clean_text,
        extract_keywords,
        truncate_text,
        detect_language,
        
        # –†–∞–±–æ—Ç–∞ —Å URL
        validate_url,
        extract_domain,
        is_same_domain,
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
        generate_hash,
        generate_id,
        safe_json_load,
        safe_json_save,
        
        # –†–∞–±–æ—Ç–∞ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        format_timestamp,
        format_relative_time,
        parse_time_period,
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
        sanitize_input,
        validate_category,
        validate_pagination,
        
        # –ö–ª–∞—Å—Å—ã
        NotificationManager,
        PerformanceTimer,
        notification_manager,
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        load_config_with_defaults,
        ensure_directory_exists
    )
    _helpers_available = True
    print("‚úÖ Helpers imported successfully")
    
except ImportError as e:
    _helpers_available = False
    print(f"‚ö†Ô∏è Helpers import failed: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    def validate_file_type(*args, **kwargs):
        return False
    
    def clean_text(text):
        return text.strip() if text else ""
    
    def generate_id(*args, **kwargs):
        import time
        return str(int(time.time()))
    
    def safe_json_load(file_path, default=None):
        try:
            import json
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return default
    
    def safe_json_save(data, file_path):
        try:
            import json
            import os
            os.makedirs(os.path.dirname(file_path), exist_ok=True)
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            return True
        except:
            return False

# –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä
try:
    from .logger import setup_logging, RequestLogger
    _logger_available = True
    print("‚úÖ Logger imported successfully")
    
except ImportError as e:
    _logger_available = False
    print(f"‚ö†Ô∏è Logger import failed: {e}")
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è setup_logging
    def setup_logging(log_level="INFO", log_file=None):
        import logging
        logging.basicConfig(
            level=getattr(logging, log_level.upper(), logging.INFO),
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        return logging.getLogger(__name__)
    
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è RequestLogger
    class RequestLogger:
        def __init__(self, *args, **kwargs):
            self.logger = logging.getLogger("request")
        
        def log_request(self, method, path, status=None):
            if status:
                self.logger.info(f"{method} {path} - {status}")
            else:
                self.logger.info(f"{method} {path}")

# –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DEFAULT_CONFIG = {
    "file_size_limit": 10 * 1024 * 1024,  # 10MB
    "text_length_limit": 10000,           # 10K —Å–∏–º–≤–æ–ª–æ–≤
    "cache_ttl": 300,                     # 5 –º–∏–Ω—É—Ç
    "rate_limit": 100,                    # 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    "log_level": "INFO"
}

class UtilsConfig:
    """–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è utils –ø–∞–∫–µ—Ç–∞"""
    
    def __init__(self):
        self.config = DEFAULT_CONFIG.copy()
    
    def get(self, key, default=None):
        return self.config.get(key, default)
    
    def set(self, key, value):
        self.config[key] = value
    
    def update(self, **kwargs):
        self.config.update(kwargs)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = UtilsConfig()

# –§—É–Ω–∫—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def get_config(key, default=None):
    return config.get(key, default)

def set_config(key, value):
    config.set(key, value)

def initialize_utils(custom_config=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç utils –ø–∞–∫–µ—Ç"""
    if custom_config:
        config.update(**custom_config)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directories = ["logs", "cache", "temp", "backups"]
    for directory in directories:
        try:
            import os
            os.makedirs(directory, exist_ok=True)
        except:
            pass
    
    print("‚úÖ Utils package initialized")

def get_utils_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–∫–µ—Ç–µ utils"""
    return {
        "version": __version__,
        "author": __author__,
        "description": __description__,
        "helpers_available": _helpers_available,
        "logger_available": _logger_available,
        "config": config.config
    }

# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
__all__ = [
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    '__version__',
    '__author__',
    '__description__',
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    'config',
    'get_config',
    'set_config',
    'initialize_utils',
    'get_utils_info',
    'DEFAULT_CONFIG',
    'UtilsConfig',
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    'setup_logging',
    'RequestLogger',
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–≥–ª—É—à–∫–∏)
    'clean_text',
    'generate_id',
    'safe_json_load',
    'safe_json_save',
    'validate_file_type'
]

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ helpers –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if _helpers_available:
    __all__.extend([
        'get_file_mime_type', 'format_file_size', 'clean_filename',
        'generate_unique_filename', 'extract_keywords', 'truncate_text',
        'detect_language', 'validate_url', 'extract_domain', 'is_same_domain',
        'generate_hash', 'format_timestamp', 'format_relative_time',
        'parse_time_period', 'sanitize_input', 'validate_category',
        'validate_pagination', 'NotificationManager', 'PerformanceTimer',
        'notification_manager', 'load_config_with_defaults', 'ensure_directory_exists'
    ])

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
try:
    initialize_utils()
except Exception as e:
    print(f"‚ö†Ô∏è Auto-initialization failed: {e}")

print(f"üì¶ Utils package loaded ({len(__all__)} items available)")