# ====================================
# –§–ê–ô–õ: backend/utils/logger.py (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
# –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è ImportError
# ====================================

"""
–ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Legal Assistant
"""

import logging
import sys
import os
from pathlib import Path


def setup_logging(log_level: str = "INFO", log_file: str = None):
    """–ü—Ä–æ—Å—Ç–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if log_file:
        log_path = Path(log_file)
        log_path.parent.mkdir(parents=True, exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    
    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    handlers = [logging.StreamHandler(sys.stdout)]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π handler –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª
    if log_file:
        try:
            file_handler = logging.FileHandler(log_file, encoding='utf-8')
            file_handler.setFormatter(logging.Formatter(log_format))
            handlers.append(file_handler)
        except Exception as e:
            print(f"Warning: Could not create log file {log_file}: {e}")
    
    logging.basicConfig(
        level=getattr(logging, log_level.upper(), logging.INFO),
        format=log_format,
        handlers=handlers,
        force=True  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("uvicorn.access").setLevel(logging.WARNING)
    logging.getLogger("uvicorn.error").setLevel(logging.INFO)
    
    logger = logging.getLogger(__name__)
    logger.info("üìù Logging configured successfully")
    
    return logger


class RequestLogger:
    """–ü—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, name: str = "request"):
        self.logger = logging.getLogger(name)
    
    def log_request(self, method: str, path: str, status: int = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å"""
        if status:
            self.logger.info(f"{method} {path} - {status}")
        else:
            self.logger.info(f"{method} {path}")


# –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
if not logging.getLogger().handlers:
    setup_logging()