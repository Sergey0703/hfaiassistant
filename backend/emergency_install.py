#!/usr/bin/env python3
# ====================================
# –§–ê–ô–õ: backend/emergency_install.py
# –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê - –¢–û–õ–¨–ö–û –†–ê–ë–û–ß–ò–ï –ü–ê–ö–ï–¢–´
# ====================================

"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö –ø–∞–∫–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û —Ä–∞–±–æ—Ç–∞—é—Ç
"""

import subprocess
import sys
import os

def install_package(package, version=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    package_spec = f"{package}=={version}" if version else package
    
    try:
        print(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package_spec}...")
        result = subprocess.run([
            sys.executable, "-m", "pip", "install", package_spec, "--only-binary=all"
        ], capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
        return False
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
        return False

def try_install_alternatives(alternatives):
    """–ü—Ä–æ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–∞"""
    for package, versions in alternatives.items():
        print(f"\nüîÑ –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}...")
        
        for version in versions:
            if install_package(package, version):
                return True
        
        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ—Ä—Å–∏–∏
        if install_package(package):
            return True
    
    return False

def main():
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê Legal Assistant API")
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
    print("=" * 60)
    
    # –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
    core_packages = {
        "fastapi": ["0.100.1", "0.95.2", "0.90.1"],
        "uvicorn": ["0.22.0", "0.20.0", "0.18.3"],
        "pydantic": ["1.10.12", "1.10.7", "1.9.2"],  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ v1
        "python-multipart": ["0.0.5", "0.0.6"],
        "python-dotenv": ["1.0.0", "0.21.0"]
    }
    
    optional_packages = {
        "requests": ["2.31.0", "2.28.2"],
        "beautifulsoup4": ["4.12.2", "4.11.1"],
        "httpx": ["0.24.1", "0.23.3"]
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º pip
    print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip...")
    try:
        subprocess.run([sys.executable, "-m", "pip", "install", "--upgrade", "pip"], 
                      check=True, capture_output=True)
        print("‚úÖ pip –æ–±–Ω–æ–≤–ª–µ–Ω")
    except:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å pip, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    print("\n" + "="*40)
    print("–£–°–¢–ê–ù–û–í–ö–ê –û–°–ù–û–í–ù–´–• –ü–ê–ö–ï–¢–û–í")
    print("="*40)
    
    core_success = 0
    for package, versions in core_packages.items():
        print(f"\nüîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {package}...")
        success = False
        
        for version in versions:
            if install_package(package, version):
                success = True
                break
        
        if not success:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –≤–µ—Ä—Å–∏–∏
            if install_package(package):
                success = True
        
        if success:
            core_success += 1
        else:
            print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞–∫–µ—Ç—ã
    if core_success < 3:  # –ú–∏–Ω–∏–º—É–º fastapi, uvicorn, pydantic
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–ê–ö–ï–¢–´ –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–´!")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("1. pip install fastapi uvicorn pydantic --no-deps")
        print("2. pip install fastapi==0.95.2 uvicorn==0.20.0 pydantic==1.10.12")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    print("\n" + "="*40)
    print("–£–°–¢–ê–ù–û–í–ö–ê –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–• –ü–ê–ö–ï–¢–û–í")
    print("="*40)
    
    for package, versions in optional_packages.items():
        print(f"\nüîß –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}...")
        success = False
        
        for version in versions:
            if install_package(package, version):
                success = True
                break
        
        if not success:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    print("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    directories = ["logs", "simple_db", "uploads", "temp"]
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ {directory}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("\n" + "="*40)
    print("–ü–†–û–í–ï–†–ö–ê –£–°–¢–ê–ù–û–í–ö–ò")
    print("="*40)
    
    critical_imports = ["fastapi", "uvicorn", "pydantic"]
    working_imports = []
    
    for module in critical_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
            working_imports.append(module)
        except ImportError:
            print(f"‚ùå {module}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "="*60)
    if len(working_imports) >= 3:
        print("üéâ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–ê!")
        print("\nüöÄ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å:")
        print("   python main.py")
        print("\nüìö –ï—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–∫—Ä–æ–π—Ç–µ:")
        print("   http://localhost:8000")
        print("   http://localhost:8000/docs")
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        create_test_script()
        
        return True
    else:
        print("‚ùå –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ù–ï –£–î–ê–õ–ê–°–¨")
        print("\n–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:")
        print("pip install fastapi uvicorn")
        return False

def create_test_script():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç"""
    test_script = """#!/usr/bin/env python3
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç API
from fastapi import FastAPI

app = FastAPI(title="Emergency Legal Assistant API", version="1.0.0")

@app.get("/")
def read_root():
    return {"message": "Emergency API works!", "status": "ok"}

@app.get("/health")
def health():
    return {"status": "healthy", "mode": "emergency"}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting emergency server...")
    uvicorn.run(app, host="0.0.0.0", port=8000)
"""
    
    try:
        with open("emergency_test.py", "w", encoding="utf-8") as f:
            f.write(test_script)
        print("\nüìù –°–æ–∑–¥–∞–Ω emergency_test.py –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python emergency_test.py")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {e}")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚õî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é: pip install fastapi uvicorn")