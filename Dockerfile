# Dockerfile –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
# Single-stage build: Python + React —Å—Ç–∞—Ç–∏–∫–∞ + –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
# –¶–µ–ª–µ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: <1GB RAM

# ====================================
# –ë–ê–ó–û–í–´–ô –û–ë–†–ê–ó - PYTHON SLIM
# ====================================
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è HuggingFace Spaces
RUN useradd -m -u 1000 user
USER user
ENV HOME=/home/user \
    PATH=/home/user/.local/bin:$PATH

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
WORKDIR $HOME/app

# ====================================
# –£–°–¢–ê–ù–û–í–ö–ê PYTHON –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ====================================

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ requirements –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
COPY --chown=user requirements.txt .

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyTorch CPU –≤–µ—Ä—Å–∏–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
RUN pip install --user --no-cache-dir \
    torch==2.1.0 \
    torchvision==0.16.0 \
    --index-url https://download.pytorch.org/whl/cpu

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN pip install --user --no-cache-dir -r requirements.txt

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç
RUN python -c "import fastapi, transformers, sentence_transformers, chromadb; print('‚úÖ All critical imports OK')"

# ====================================
# –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ====================================

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –±—ç–∫–µ–Ω–¥–∞
COPY --chown=user backend/ .

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
RUN mkdir -p logs chromadb_data uploads temp .cache

# ====================================
# REACT –°–¢–ê–¢–ò–ö–ê (–í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê –ü–û–î–î–ï–†–ñ–ö–ê –í–ê–®–ï–ì–û FRONTEND)
# ====================================

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
RUN mkdir -p static frontend/build

# –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É (–±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞ –≤–∞—à–∏–º React build)
RUN echo '<!DOCTYPE html><html><head><title>Loading...</title></head><body><h1>Loading React App...</h1></body></html>' > static/index.html

# –ö–æ–ø–∏—Ä—É–µ–º –≤–∞—à React build –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN echo "Checking for React build..."
COPY --chown=user frontend/ ./frontend_source/
RUN if [ -d "frontend_source/build" ] && [ -f "frontend_source/build/index.html" ]; then \
    echo "‚úÖ React build found - installing your frontend..."; \
    cp -r frontend_source/build/* static/; \
    cp -r frontend_source/build/* frontend/build/; \
    echo "‚úÖ Your React frontend installed successfully"; \
    else \
    echo "‚ö†Ô∏è No React build found in frontend/build/"; \
    echo "üìù To use your React frontend:"; \
    echo "   1. cd frontend"; \
    echo "   2. npm install"; \
    echo "   3. npm run build"; \
    echo "   4. Rebuild Docker image"; \
    echo "‚öôÔ∏è Using API-only mode for now"; \
    echo '<!DOCTYPE html>\
<html>\
<head>\
    <title>Legal Assistant API</title>\
    <meta charset="utf-8">\
    <meta name="viewport" content="width=device-width, initial-scale=1">\
</head>\
<body>\
    <h1>üèõÔ∏è Legal Assistant API</h1>\
    <p><strong>Your React frontend will appear here after building</strong></p>\
    <h3>üìñ API Documentation:</h3>\
    <ul>\
        <li><a href="/docs">Interactive API Docs</a></li>\
        <li><a href="/health">Health Check</a></li>\
    </ul>\
    <h3>üîß To enable your React frontend:</h3>\
    <ol>\
        <li>cd frontend</li>\
        <li>npm install</li>\
        <li>npm run build</li>\
        <li>Rebuild Docker image</li>\
    </ol>\
</body>\
</html>' > static/index.html; \
    cp static/index.html frontend/build/index.html; \
    fi

# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
RUN rm -rf frontend_source

# ====================================
# –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø
# ====================================
ENV PYTHONPATH=$HOME/app
ENV PYTHONUNBUFFERED=1
ENV LOG_LEVEL=INFO
ENV USE_CHROMADB=true

# HuggingFace Spaces settings
ENV HF_SPACES=true
ENV TRANSFORMERS_CACHE=$HOME/app/.cache
ENV HF_HOME=$HOME/app/.cache

# –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è RAG –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ENV LLM_MODEL=google/flan-t5-small
ENV LLM_MAX_TOKENS=150
ENV LLM_TEMPERATURE=0.3
ENV LLM_TIMEOUT=20

# Embedding –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
ENV EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
ENV MAX_CONTEXT_DOCUMENTS=2
ENV CONTEXT_TRUNCATE_LENGTH=300

# React frontend settings
ENV REACT_BUILD_PATH=$HOME/app/static
ENV SERVE_REACT=true

# –ü–æ—Ä—Ç –¥–ª—è HuggingFace Spaces
EXPOSE 7860

# ====================================
# HEALTHCHECK
# ====================================
HEALTHCHECK --interval=30s --timeout=15s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:7860/health || exit 1

# ====================================
# –ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–°–ö–ê
# ====================================
CMD ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "7860", "--workers", "1"]